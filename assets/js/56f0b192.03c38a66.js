"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1683],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),l=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=l(e.components);return o.createElement(c.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=l(t),d=r,h=m["".concat(c,".").concat(d)]||m[d]||u[d]||a;return t?o.createElement(h,s(s({ref:n},p),{},{components:t})):o.createElement(h,s({ref:n},p))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,s=new Array(a);s[0]=d;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var l=2;l<a;l++)s[l]=t[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},37734:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var o=t(87462),r=(t(67294),t(3905));const a={layout:"default",title:"Completed Application",parent:"Tutorial",sidebar_position:11},s="Completed application",i={unversionedId:"tutorial/completed-app",id:"tutorial/completed-app",title:"Completed Application",description:"Here is for reference, the source code of the application, at the end of the tutorial (empty files are ignored).",source:"@site/docs/tutorial/completed-app.md",sourceDirName:"tutorial",slug:"/tutorial/completed-app",permalink:"/dokku/docs/tutorial/completed-app",draft:!1,editUrl:"https://github.com/hebus/sba-angular/tree/main/docs/tutorial/completed-app.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{layout:"default",title:"Completed Application",parent:"Tutorial",sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Responsive Design",permalink:"/dokku/docs/tutorial/responsive-design"},next:{title:"Libraries",permalink:"/dokku/docs/libraries/"}},c={},l=[{value:"App module <code>src/app/app.module.ts</code>",id:"app-module-srcappappmodulets",level:2},{value:"App Component",id:"app-component",level:2},{value:"Controller <code>src/app/app.component.ts</code>",id:"controller-srcappappcomponentts",level:3},{value:"Template <code>src/app/app.component.html</code>",id:"template-srcappappcomponenthtml",level:3},{value:"Styles <code>src/app/app.component.scss</code>",id:"styles-srcappappcomponentscss",level:3},{value:"Home Component",id:"home-component",level:2},{value:"Controller <code>src/app/home/home.component.ts</code>",id:"controller-srcapphomehomecomponentts",level:3},{value:"Template <code>src/app/home/home.component.html</code>",id:"template-srcapphomehomecomponenthtml",level:3},{value:"Search Component",id:"search-component",level:2},{value:"Controller <code>src/app/search/search.component.ts</code>",id:"controller-srcappsearchsearchcomponentts",level:3},{value:"Template <code>src/app/search/search.component.html</code>",id:"template-srcappsearchsearchcomponenthtml",level:3},{value:"Styles <code>src/app/search/search.component.scss</code>",id:"styles-srcappsearchsearchcomponentscss",level:3},{value:"Autocomplete component",id:"autocomplete-component",level:2},{value:"Controller <code>src/app/autocomplete.ts</code>",id:"controller-srcappautocompletets",level:3},{value:"Search form component",id:"search-form-component",level:2},{value:"Controller <code>src/app/search-form/search-form.component.ts</code>",id:"controller-srcappsearch-formsearch-formcomponentts",level:3},{value:"Template <code>src/app/search-form/search-form.component.html</code>",id:"template-srcappsearch-formsearch-formcomponenthtml",level:3},{value:"Preview",id:"preview",level:2},{value:"Controller <code>src/preview.ts</code>",id:"controller-srcpreviewts",level:3},{value:"Global styles",id:"global-styles",level:2},{value:"App <code>src/styles/app.scss</code>",id:"app-srcstylesappscss",level:3},{value:"Locales",id:"locales",level:2},{value:"English <code>src/locales/en.ts</code>",id:"english-srclocalesents",level:3},{value:"French <code>src/locales/fr.ts</code>",id:"french-srclocalesfrts",level:3}],p={toc:l},m="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"completed-application"},"Completed application"),(0,r.kt)("p",null,"Here is for reference, the source code of the application, at the end of the tutorial (empty files are ignored)."),(0,r.kt)("h2",{id:"app-module-srcappappmodulets"},"App module ",(0,r.kt)("inlineCode",{parentName:"h2"},"src/app/app.module.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.module.ts"',title:'"app.module.ts"'},'import { NgModule } from "@angular/core";\nimport { BrowserModule } from "@angular/platform-browser";\nimport { RouterModule } from \'@angular/router\';\nimport { LocationStrategy, HashLocationStrategy } from "@angular/common";\nimport { HTTP_INTERCEPTORS } from "@angular/common/http";\nimport { FormsModule, ReactiveFormsModule } from "@angular/forms";\nimport { Observable, from } from "rxjs";\n\nimport { WebServicesModule, StartConfigWebService, StartConfig } from "@sinequa/core/web-services";\nimport { LoginModule, LoginInterceptor } from "@sinequa/core/login";\nimport { IntlModule, LocaleData, LocalesConfig, Locale } from "@sinequa/core/intl";\nimport { ModalModule } from "@sinequa/core/modal";\nimport { NotificationsInterceptor } from "@sinequa/core/notification";\nimport { AuditInterceptor } from "@sinequa/core/app-utils";\n\nimport { BsSearchModule } from \'@sinequa/components/search\';\nimport { BsFacetModule } from \'@sinequa/components/facet\';\nimport { BsActionModule } from \'@sinequa/components/action\';\nimport { PreviewModule } from \'@sinequa/components/preview\';\nimport { BsModalModule } from \'@sinequa/components/modal\';\nimport { BsSavedQueriesModule } from \'@sinequa/components/saved-queries\';\nimport { SearchFormComponent } from "@sinequa/components/search-form";\n\nimport { environment } from "../environments/environment";\nimport { AppComponent } from "./app.component";\nimport { Preview } from "./preview";\nimport { HomeComponent } from \'./home/home.component\';\nimport { SearchComponent } from \'./search/search.component\';\nimport { Autocomplete } from "./autocomplete";\nimport { SearchFormComponent as AppSearchFormComponent } from \'./search-form/search-form.component\';\nimport { SCREEN_SIZE_RULES } from \'@sinequa/components/utils\';\n\nexport const startConfig: StartConfig = {\n    app: "training",\n    autoSAMLProvider: "identity-dev",\n    production: environment.production,\n    auditEnabled: true\n};\n\n// Locales configuration\nexport class AppLocalesConfig implements LocalesConfig {\n    locales: Locale[] = [\n        { name: "en", display: "msg#locale.en" },\n        { name: "fr", display: "msg#locale.fr" }\n    ];\n    defaultLocale: Locale = this.locales[0];\n    loadLocale(locale: string): Observable<LocaleData> {\n        return from(import(\'../locales/\' + locale).then(m => m.default));\n    }\n}\n\nexport function StartConfigInitializer(startConfigWebService: StartConfigWebService) {\n    return () => startConfigWebService.fetchPreLoginAppConfig();\n}\n\n// Screen size breakpoints (must be consistent with Bootstrap custom breakpoints in styles/app.scss)\nexport const breakpoints = {\n    lg: "(min-width: 1000px)",\n    sm: "(min-width: 600px) and (max-width: 999px)",\n    xs: "(max-width: 599px)",\n}\n\n@NgModule({\n    imports: [\n        BrowserModule,\n        RouterModule.forRoot([\n            { path: "home", component: HomeComponent },\n            { path: "search", component: SearchComponent },\n            { path: "**", redirectTo: "home" }\n        ]),\n        FormsModule,\n        ReactiveFormsModule,\n\n        WebServicesModule.forRoot(startConfig),\n        IntlModule.forRoot(AppLocalesConfig),\n        LoginModule.forRoot(), // Just use default login modal\n        ModalModule.forRoot(),\n\n        BsSearchModule.forRoot({ routes: [\'search\'] }),\n        BsFacetModule,\n        BsActionModule,\n        PreviewModule,\n        BsModalModule,\n        SearchFormComponent,\n        BsSavedQueriesModule\n    ],\n    declarations: [\n        AppComponent,\n        Preview,\n        Autocomplete,\n        HomeComponent,\n        SearchComponent,\n        AppSearchFormComponent\n    ],\n    providers: [\n        // Provides an APP_INITIALIZER which will fetch application configuration information from the Sinequa\n        // server automatically at startup using the application name specified in the URL (app[-debug]/<app-name>).\n        // This allows an application to avoid hard-coding parameters in the StartConfig but requires that the application\n        // be served from the an app[-debug]/<app name> URL.\n        // {provide: APP_INITIALIZER, useFactory: StartConfigInitializer, deps: [StartConfigWebService], multi: true},\n\n        // Provides the Angular LocationStrategy to be used for reading route state from the browser\'s URL. Currently\n        // only the HashLocationStrategy is supported by Sinequa.\n        { provide: LocationStrategy, useClass: HashLocationStrategy },\n\n        // Provides an HttpInterceptor to handle user login. The LoginInterceptor handles HTTP 401 responses\n        // to Sinequa web service requests and initiates the login process.\n        { provide: HTTP_INTERCEPTORS, useClass: LoginInterceptor, multi: true },\n\n        // Provides an HttpInterceptor that offers a centralized location through which all client-side\n        // audit records pass. An application can replace AuditInterceptor with a subclass that overrides\n        // the updateAuditRecord method to add custom audit information to the records.\n        { provide: HTTP_INTERCEPTORS, useClass: AuditInterceptor, multi: true },\n\n        // Provides an HttpInterceptor that automatically processes any notifications specified in the $notifications\n        // member of the response body to any Sinequa web service requests.\n        { provide: HTTP_INTERCEPTORS, useClass: NotificationsInterceptor, multi: true },\n\n        { provide: SCREEN_SIZE_RULES, useValue: breakpoints }\n    ],\n    bootstrap: [\n        AppComponent\n    ]\n})\nexport class AppModule {\n}\n')),(0,r.kt)("h2",{id:"app-component"},"App Component"),(0,r.kt)("h3",{id:"controller-srcappappcomponentts"},"Controller ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/app/app.component.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="app.component.ts"',title:'"app.component.ts"'},'import {Component, AfterViewInit} from "@angular/core";\nimport {LoginService} from "@sinequa/core/login";\nimport {NotificationsService, Notification} from "@sinequa/core/notification";\n\n@Component({\n    selector: "app",\n    templateUrl: "./app.component.html",\n    styleUrls: ["./app.component.scss"]\n})\nexport class AppComponent implements AfterViewInit {\n\n    constructor(\n        public loginService: LoginService,\n        public notificationsService: NotificationsService) {\n    }\n\n    ngAfterViewInit() {\n        this.login();\n    }\n\n    login() {\n        this.loginService.login();\n    }\n\n    logout() {\n        this.loginService.logout();\n    }\n\n    deleteNotification(notification: Notification) {\n        setTimeout(() => this.notificationsService.deleteNotification(notification), 5000);\n        return true;\n    }\n}\n')),(0,r.kt)("h3",{id:"template-srcappappcomponenthtml"},"Template ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/app/app.component.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="app.component.html"',title:'"app.component.html"'},'<router-outlet></router-outlet>\n\n<button *ngIf="loginService.complete" type="button" (click)="logout()">{{ msg#app.logout | sqMessage }}</button>\n<button *ngIf="!loginService.complete" type="button" (click)="login()">{{ msg#app.login | sqMessage }}</button>\n<ng-container *ngIf="notificationsService.notificationsStream | async as notification">\n    <div *ngIf="deleteNotification(notification)" class="notification position-fixed" style="bottom: 5px; right: 5px; width: 500px">\n        <div *ngIf="notification.title" class="title">\n            <span>{{notification.title | sqMessage}}</span>\n            <hr>\n        </div>\n        <div>{{notification.text | sqMessage:{values: notification.params} }}</div>\n    </div>\n</ng-container>\n')),(0,r.kt)("h3",{id:"styles-srcappappcomponentscss"},"Styles ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/app/app.component.scss")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scss",metastring:'title="app.component.scss"',title:'"app.component.scss"'},".notification {\n    border: solid;\n    padding: 8px;\n\n    .title {\n        font-weight: bold;\n    }\n}\n")),(0,r.kt)("h2",{id:"home-component"},"Home Component"),(0,r.kt)("h3",{id:"controller-srcapphomehomecomponentts"},"Controller ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/app/home/home.component.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="home.component.ts"',title:'"home.component.ts"'},"import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n")),(0,r.kt)("h3",{id:"template-srcapphomehomecomponenthtml"},"Template ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/app/home/home.component.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="home.component.html"',title:'"home.component.html"'},'<div class="vh-100 w-100 d-flex flex-column justify-content-center align-items-center">\n    <h1 class="mb-5">Hello Search \ud83d\udd0d</h1>\n    <div class="w-50 position-relative mb-5">\n        <app-search-form></app-search-form>\n    </div>\n</div>\n')),(0,r.kt)("h2",{id:"search-component"},"Search Component"),(0,r.kt)("h3",{id:"controller-srcappsearchsearchcomponentts"},"Controller ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/app/search/search.component.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="search.component.ts"',title:'"search.component.ts"'},"import { Component } from \"@angular/core\";\nimport { Action } from '@sinequa/components/action';\nimport { IntlService, Locale } from '@sinequa/core/intl';\nimport { Record } from '@sinequa/core/web-services';\nimport { ModalService } from '@sinequa/core/modal';\nimport { Preview } from '../preview';\nimport { SavedQueriesService } from '@sinequa/components/saved-queries';\nimport { SearchService } from '@sinequa/components/search';\nimport { UIService } from '@sinequa/components/utils';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss']\n})\nexport class SearchComponent {\n  languageActions: Action[];\n  _showFacet: boolean = false;\n\n  constructor(\n    public intlService: IntlService,\n    public modalService: ModalService,\n    public savedQueriesService: SavedQueriesService,\n    public searchService: SearchService,\n    public ui: UIService) {\n\n    // Create one action (button) for each language\n    this.languageActions = this.intlService.locales.map(locale =>\n      new Action({\n        text: locale.display,   // \"French\"\n        data: locale,   // French locale\n        selected: locale == this.intlService.currentLocale, // Whether French is the current locale\n        action: (item: Action, $event: UIEvent) => {    // On click, switch to this language\n          this.intlService.use((item.data as Locale).name).subscribe(\n            (value) => this.languageActions.forEach(a => a.update()));\n        },\n        updater: (action) => {  // Update the status of buttons\n          action.selected = action.data === this.intlService.currentLocale;\n        }\n      })\n    );\n\n  }\n\n  openDocument(record: Record){\n    this.modalService.open(Preview, {model: record, fullscreen: true});\n    return false;\n  }\n\n  get showFacet(): boolean {\n    return this.ui.screenSizeIsGreaterOrEqual('lg') || this._showFacet;\n  }\n\n}\n")),(0,r.kt)("h3",{id:"template-srcappsearchsearchcomponenthtml"},"Template ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/app/search/search.component.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="search.component.html"',title:'"search.component.html"'},'<div class="search container">\n    <div class="row">\n\n        \x3c!-- Navbar --\x3e\n        <nav class="navbar col-12 d-flex px-2 px-sm-0">\n            <a [routerLink]="[\'/home\']" *ngIf="ui.screenSizeIsGreater(\'xs\') || !showFacet">\n                <h1>\ud83d\udd0d<span *ngIf="ui.screenSizeIsGreaterOrEqual(\'lg\')"> Hello Search</span></h1>\n            </a>\n            <app-search-form class="flex-grow-1 position-relative mx-sm-3" style="min-height: 41px;"\n                *ngIf="ui.screenSizeIsGreater(\'xs\') || showFacet"></app-search-form>\n            <button class="btn btn-light ml-auto" (click)="_showFacet = !_showFacet" *ngIf="ui.screenSizeIsLess(\'lg\')">\n                <i class="fas fa-filter"></i>\n            </button>\n            <ul class="navbar-nav navbar-right" *ngIf="ui.screenSizeIsGreater(\'xs\') || !showFacet">\n                <sq-saved-queries-menu [autoAdjustBreakpoint]="\'lg\'"\n                    [collapseBreakpoint]="\'xs\'"></sq-saved-queries-menu>\n            </ul>\n        </nav>\n\n        <ng-container *ngIf="searchService.resultsStream | async as results">\n\n            \x3c!-- Results --\x3e\n            <div class="col-lg-8" *ngIf="ui.screenSizeIsGreaterOrEqual(\'lg\') || !_showFacet">\n                <sq-tabs [results]="results"></sq-tabs>\n                <sq-loading-bar></sq-loading-bar>\n                <div *ngFor="let record of results.records" class="record">\n                    <a href="#" (click)="openDocument(record)">\n                        <h3 [innerHtml]="record.displayTitle || record.title"></h3>\n                    </a>\n                    <a href="{{record.url1}}">\n                        <div class="source">{{record.url1}}</div>\n                    </a>\n                    <p *ngIf="record.relevantExtracts" [innerHTML]="record.relevantExtracts"></p>\n                </div>\n                <sq-pager [results]="results"></sq-pager>\n            </div>\n\n            \x3c!-- Facets --\x3e\n            <div class="col-lg-4" *ngIf="showFacet">\n                <sq-facet-card [title]="\'msg#facet.treepath.title\'" [icon]="\'fas fa-sitemap\'">\n                    <sq-facet-list #facet [results]="results" [aggregation]="\'Treepath\'"></sq-facet-list>\n                </sq-facet-card>\n\n                <sq-facet-card [title]="\'msg#facet.company.title\'" [icon]="\'fas fa-building\'">\n                    <sq-facet-list #facet [results]="results" [aggregation]="\'Company\'" [allowExclude]="false"\n                        [allowAnd]="false"></sq-facet-list>\n                </sq-facet-card>\n\n                <sq-facet-card [title]="\'msg#savedQueries.savedQueries\'" [icon]="\'fas fa-save\'">\n                    <sq-facet-saved-queries #facet [maxQueries]="5"></sq-facet-saved-queries>\n                </sq-facet-card>\n            </div>\n\n            \x3c!-- Footer --\x3e\n            <div class="col-12">\n                <hr>\n                <span [sq-action-buttons]="{items: languageActions}"></span>\n                <button class="btn btn-success" (click)="savedQueriesService.createSavedQueryModal()">\n                    <i class="fas fa-save"></i>\n                </button>\n            </div>\n        </ng-container>\n    </div>\n</div>\n')),(0,r.kt)("h3",{id:"styles-srcappsearchsearchcomponentscss"},"Styles ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/app/search/search.component.scss")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scss",metastring:'title="search.component.scss"',title:'"search.component.scss"'},".search {\n    h1 {\n        margin-bottom: 0.25em;\n    }\n\n    .record {\n\n        h3 {\n            margin: 0.5em 0 0 0;\n            font-weight: normal;\n            font-size: 1.25em;\n        }\n\n        .source {\n            color: #006621;\n            font-size: 0.875em;\n            margin: 0.25em 0;\n        }\n\n        p {\n            color: #676767;\n            margin-top: 0;\n            font-size: 0.875em;\n        }\n    }\n}\n\nsq-facet-card {\n    display: block;\n    margin-bottom: 1em;\n}\n")),(0,r.kt)("h2",{id:"autocomplete-component"},"Autocomplete component"),(0,r.kt)("h3",{id:"controller-srcappautocompletets"},"Controller ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/app/autocomplete.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="autocomplete.ts"',title:'"autocomplete.ts"'},'\nimport { Component, Input, OnChanges, OnInit } from "@angular/core";\nimport { ReplaySubject, debounceTime, switchMap, filter, Observable } from "rxjs";\nimport { AutocompleteItem, SuggestService } from "@sinequa/components/autocomplete";\nimport { SearchService } from "@sinequa/components/search";\n\n@Component({\n    selector: "autocomplete",\n    template: `\n<div class="list-group list-group-flush" *ngIf="items$ | async; let items">\n    <a role="button" *ngFor="let item of items" class="list-group-item list-group-item-action" (click)="search(item.display)">\n        {{item.display}}\n    </a>\n</div>\n    `,\n    styles: [`\n.list-group-flush > .list-group-item:last-child {\n  border-end-start-radius: 20px;\n  border-end-end-radius: 20px;\n}\n    `]\n})\nexport class Autocomplete implements OnChanges, OnInit {\n\n    @Input() queryText: string;\n\n    inputChange$ = new ReplaySubject(1);\n    items$: Observable<AutocompleteItem[] | undefined>;\n\n    constructor(private suggestService: SuggestService,\n        private searchService: SearchService) {\n    }\n\n    ngOnInit() {\n        this.items$ = this.inputChange$\n            .pipe(\n                filter(text => !!text), // prevents searching if there is no query text\n                debounceTime(200), // add a slight wait before retrieving the suggestions to avoid making calls at each change\n                switchMap(text => this.suggestService.get(undefined, text as string)) // retrieve the suggestions\n            );\n    }\n\n    ngOnChanges() {\n        this.inputChange$.next(this.queryText);\n    }\n\n    search(value: string) {\n        this.searchService.query.text = value;\n        this.searchService.searchText("/search");\n    }\n}\n')),(0,r.kt)("h2",{id:"search-form-component"},"Search form component"),(0,r.kt)("h3",{id:"controller-srcappsearch-formsearch-formcomponentts"},"Controller ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/app/search-form/search-form.component.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="search-form.component.ts"',title:'"search-form.component.ts"'},"import { Component } from '@angular/core';\nimport { SearchService } from '@sinequa/components/search';\n\n@Component({\n  selector: 'app-search-form',\n  templateUrl: './search-form.component.html',\n  styleUrls: ['./search-form.component.scss']\n})\nexport class AppSearchFormComponent {\n\n  constructor(public searchService: SearchService) { }\n\n}\n")),(0,r.kt)("h3",{id:"template-srcappsearch-formsearch-formcomponenthtml"},"Template ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/app/search-form/search-form.component.html")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-html",metastring:'title="search-form.component.html"',title:'"search-form.component.html"'},'\n<sq-search-form [query]="searchService.query">\n    <ng-template let-query>\n        <autocomplete [queryText]="query.text"></autocomplete>\n    </ng-template>\n</sq-search-form>\n')),(0,r.kt)("h2",{id:"preview"},"Preview"),(0,r.kt)("h3",{id:"controller-srcpreviewts"},"Controller ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/preview.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="preview.ts"',title:'"preview.ts"'},"\nimport { Component, Inject } from \"@angular/core\";\nimport { Record } from '@sinequa/core/web-services';\nimport { MODAL_MODEL } from '@sinequa/core/modal';\nimport { SearchService } from \"@sinequa/components/search\";\nimport { PreviewHighlightColors } from \"@sinequa/components/preview\";\n\n@Component({\n    selector: \"preview\",\n    template: `\n<sq-modal [title]=\"record.title\" [showFooter]=\"false\">\n    <sq-preview #facet\n        class=\"h-100\"\n        [highlightColors]=\"highlights\"\n        [id]=\"record.id\"\n        [query]=\"searchService.query\">\n    </sq-preview>\n</sq-modal>\n    `\n})\nexport class Preview {\n\n    highlights: PreviewHighlightColors[] = [\n        {\n            name: 'company',\n            color: 'white',\n            bgColor: '#FF7675'\n        },\n        {\n            name: 'geo',\n            color: 'white',\n            bgColor: '#74B9FF'\n        },\n        {\n            name: 'person',\n            color: 'white',\n            bgColor: '#00ABB5'\n        },\n        {\n            name: 'extractslocations',\n            color: 'black',\n            bgColor: '#fffacd'\n        },\n        {\n            name: 'matchlocations',\n            color: 'black',\n            bgColor: '#ff0'\n        }\n    ];\n\n    constructor(\n        @Inject(MODAL_MODEL) public record: Record,\n        public searchService: SearchService) {\n    }\n}\n")),(0,r.kt)("h2",{id:"global-styles"},"Global styles"),(0,r.kt)("h3",{id:"app-srcstylesappscss"},"App ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/styles/app.scss")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scss",metastring:'title="app.scss"',title:'"app.scss"'},'@import "~@angular/cdk/overlay-prebuilt";\n\n// Overriding Bootstrap variables\n$grid-breakpoints: (\n        xs: 0,\n        sm: 600px,\n        lg: 1000px\n);\n\n$container-max-widths: (\n        sm: 800px,\n        lg: 1200px\n);\n\n// Bootstrap styles\n@import "~bootstrap/scss/bootstrap";\n\n/*** Fontawesome ***/\n$fa-font-path: "~@fortawesome/fontawesome-free/webfonts";\n@import "~@fortawesome/fontawesome-free/scss/fontawesome";\n@import "~@fortawesome/fontawesome-free/scss/brands";\n@import "~@fortawesome/fontawesome-free/scss/regular";\n@import "~@fortawesome/fontawesome-free/scss/solid";\n\n@import "../../../components/action/bootstrap/action.scss";\n\nbody {\n    font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;\n}\n\na {\n    text-decoration: none;\n    color: #3434d6;\n}\n\n.record .match-highlight {\n    font-weight: bold;\n    font-style: italic;\n}\n')),(0,r.kt)("h2",{id:"locales"},"Locales"),(0,r.kt)("h3",{id:"english-srclocalesents"},"English ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/locales/en.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="en.ts"',title:'"en.ts"'},'import {LocaleData} from "@sinequa/core/intl";\nimport {enCore} from "@sinequa/core/messages";\nimport "intl/locale-data/jsonp/en-US"; // Safari\nimport {Utils} from "@sinequa/core/base";\n\nimport {enFacet} from "@sinequa/components/facet";\nimport {enResult} from "@sinequa/components/result";\nimport {enSearch} from "@sinequa/components/search";\nimport {enSearchForm} from "@sinequa/components/search-form";\nimport {enSavedQueries} from "@sinequa/components/saved-queries";\n\nconst d3Format = require(\'d3-format/locale/en-US\');\nconst d3Time = require(\'d3-time-format/locale/en-US\');\n\nconst appMessages = {\n\n    locale: {\n        en: "English",\n        fr: "Fran\xe7ais"\n    },\n\n    app: {\n        login: "Login",\n        logout: "Logout",\n    },\n\n    search: {\n        button: "Search",\n        placeholder: "Enter search terms...",\n        clear: "Clear"\n    },\n\n    facet: {\n        loadMore: "Gimme more data, please!"\n    },\n\n    results: {\n        resultsAllTab: "All",\n        tabPeople: "People",\n        tabBusiness: "Companies",\n        tabLocation: "Places"\n    },\n}\n\nexport default <LocaleData> {\n    intl: {\n        locale: "en-US"\n    },\n    d3: {\n        locale: "en-US",\n        format: d3Format,\n        time: d3Time\n    },\n    messages: Utils.merge({}, enCore, enFacet, enResult, enSearch, enSearchForm, enSavedQueries, appMessages)\n};\n')),(0,r.kt)("h3",{id:"french-srclocalesfrts"},"French ",(0,r.kt)("inlineCode",{parentName:"h3"},"src/locales/fr.ts")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="fr.ts"',title:'"fr.ts"'},'import {LocaleData} from "@sinequa/core/intl";\nimport {frCore} from "@sinequa/core/messages";\nimport "intl/locale-data/jsonp/fr-FR"; // Safari\nimport {Utils} from "@sinequa/core/base";\n\nimport {frFacet} from "@sinequa/components/facet";\nimport {frResult} from "@sinequa/components/result";\nimport {frSearch} from "@sinequa/components/search";\nimport {frSearchForm} from "@sinequa/components/search-form";\nimport {frSavedQueries} from "@sinequa/components/saved-queries";\n\nconst d3Format = require(\'d3-format/locale/fr-FR\');\nconst d3Time = require(\'d3-time-format/locale/fr-FR\');\n\nconst appMessages = {\n\n    locale: {\n        en: "English",\n        fr: "Fran\xe7ais",\n    },\n\n    app: {\n        login: "Login",\n        logout: "Logout",\n    },\n\n    search: {\n        button: "Chercher",\n        placeholder: "Termes de recherche...",\n        clear: "Effacer"\n    },\n\n    results: {\n        resultsAllTab: "Tous",\n        tabPeople: "Personnes",\n        tabBusiness: "Entreprises",\n        tabLocation: "Lieux"\n    },\n}\n\nexport default <LocaleData> {\n    intl: {\n        locale: "fr-FR"\n    },\n    d3: {\n        locale: "fr-FR",\n        format: d3Format,\n        time: d3Time\n    },\n    messages: Utils.merge({}, frCore, frFacet, frResult, frSearch, frSearchForm, frSavedQueries, appMessages)\n};\n')))}u.isMDXComponent=!0}}]);