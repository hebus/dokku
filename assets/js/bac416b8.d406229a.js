"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6897],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),d=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=d(n),m=i,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(h,s(s({ref:t},p),{},{components:n})):a.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var d=2;d<r;d++)s[d]=n[d];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},10168:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var a=n(87462),i=(n(67294),n(3905));const r={layout:"default",title:"Auditing applications",parent:"Tips and Tricks",sidebar_position:14},s="Auditing applications",o={unversionedId:"tipstricks/audit",id:"tipstricks/audit",title:"Auditing applications",description:'In Sinequa, Search-Based Applications can be "audited": User actions (queries, clicks, etc.) are collected and stored server-side to allow admins to study the usage of their applications and the behavior of users. This is a very important process to optimize the search relevance and user experience.',source:"@site/docs/tipstricks/audit.md",sourceDirName:"tipstricks",slug:"/tipstricks/audit",permalink:"/dokku/docs/tipstricks/audit",draft:!1,editUrl:"https://github.com/hebus/dokku/tree/main/docs/tipstricks/audit.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{layout:"default",title:"Auditing applications",parent:"Tips and Tricks",sidebar_position:14},sidebar:"tutorialSidebar",previous:{title:"Exporting Standalone Components",permalink:"/dokku/docs/tipstricks/export-standalone"},next:{title:"Server-side Plugins",permalink:"/dokku/docs/tipstricks/plugins"}},l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Standard Events",id:"standard-events",level:2},{value:"Audit events via standard web service calls",id:"audit-events-via-standard-web-service-calls",level:3},{value:"Audit events via the audit web service",id:"audit-events-via-the-audit-web-service",level:3},{value:"Custom Events",id:"custom-events",level:2},{value:"Customizing standard events",id:"customizing-standard-events",level:2}],p={toc:d},c="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(c,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"auditing-applications"},"Auditing applications"),(0,i.kt)("p",null,'In Sinequa, Search-Based Applications can be "audited": User actions (queries, clicks, etc.) are collected and stored server-side to allow admins to study the usage of their applications and the behavior of users. This is a very important process to optimize the search relevance and user experience.'),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"On the server, several prerequisites are necessary:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The creation of an audit index.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"The creation of jobs to process the audit logs and update the audit index.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"In the web app's configuration, specify which actions should be collected:"),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("img",{alt:"Audit webapp",src:n(82193).Z,width:"777",height:"616"})))),(0,i.kt)("h2",{id:"standard-events"},"Standard Events"),(0,i.kt)("p",null,"By default, Sinequa components take care of emitting audit events when needed. For example, the ",(0,i.kt)("inlineCode",{parentName:"p"},"SearchService")," emits events when the user searches for some text and the ",(0,i.kt)("inlineCode",{parentName:"p"},"FacetService")," emits events when they select a metadata in a facet."),(0,i.kt)("p",null,"This can happen in two ways:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'Normally, these audit events are emitted by "piggy-backing" on the web service HTTP call corresponding to the audited user action.'),(0,i.kt)("li",{parentName:"ul"},"Alternatively, stand-alone audit events can be emitted via the ",(0,i.kt)("inlineCode",{parentName:"li"},"AuditWebService"),".")),(0,i.kt)("h3",{id:"audit-events-via-standard-web-service-calls"},"Audit events via standard web service calls"),(0,i.kt)("p",null,"Sinequa Web Services accept an optional ",(0,i.kt)("inlineCode",{parentName:"p"},"$auditRecord")," parameter that is used to write events to the audit logs."),(0,i.kt)("p",null,"For example, in the ",(0,i.kt)("inlineCode",{parentName:"p"},"QueryWebService"),", the web service call looks as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"const observable = this.httpClient.post<Results>(this.makeUrl(this.endPoint), {\n    app: this.appName,\n    query,\n    $auditRecord: auditEvents,\n    queryIntentData\n});\n")),(0,i.kt)("p",null,"Note that the ",(0,i.kt)("inlineCode",{parentName:"p"},"$auditRecord")," field is supported across ",(0,i.kt)("strong",{parentName:"p"},"all")," web services, including the custom ones (in particular ",(0,i.kt)("inlineCode",{parentName:"p"},"JsonMethodPlugin"),")."),(0,i.kt)("h3",{id:"audit-events-via-the-audit-web-service"},"Audit events via the audit web service"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"AuditWebService"),' is a standard Sinequa service that can be injected anywhere in your application to emit "standalone" audit events.'),(0,i.kt)("p",null,"For example, it is used to emit events when users open a document (by following its original URL) in the ",(0,i.kt)("inlineCode",{parentName:"p"},"SearchService"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'this.auditService.notifyDocument(\n    AuditEventType.Click_ResultLink,\n    record,\n    results || resultId || "",\n    {\n        querytext: this.query.text,\n        querylang,\n    },\n    {\n        queryhash: results ? results.rfmQueryHash : undefined,\n        querytext: this.query.text,\n        querylang: querylang\n    }\n);\n')),(0,i.kt)("h2",{id:"custom-events"},"Custom Events"),(0,i.kt)("p",null,"Audit events are not limited to a predefined list of event types or a predefined content. It is possible to create new types of events and customize their structure."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"AuditEvent")," interface is very flexible as it requires:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A ",(0,i.kt)("inlineCode",{parentName:"p"},"type"),", which can be a standard type (among those listed in the ",(0,i.kt)("inlineCode",{parentName:"p"},"AuditEventType"),") or a custom ",(0,i.kt)("inlineCode",{parentName:"p"},"string"),".")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"A ",(0,i.kt)("inlineCode",{parentName:"p"},"detail")," field, which is a simple key-value map, where the keys correspond to columns of the audit index (of course, these columns must exist in the audit index schema, which can be customized)."),(0,i.kt)("p",{parentName:"li"},"  ",(0,i.kt)("img",{alt:"Audit schema",src:n(63241).Z,width:"753",height:"208"}),"{: .d-block .mx-auto }"))),(0,i.kt)("p",null,"Therefore, emitting a custom standalone event is as simple as the following example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'this.auditWebService.notify({\n    type: "ResultsView_Change",\n    detail: {\n        view: this.resultsViewService.resultsView.name\n    }\n});\n')),(0,i.kt)("h2",{id:"customizing-standard-events"},"Customizing standard events"),(0,i.kt)("p",null,"It is often required to add some custom data to a standard event (or even to ",(0,i.kt)("em",{parentName:"p"},"all")," standard events). One solution to that problem would be to modify (or override) the existing services (",(0,i.kt)("inlineCode",{parentName:"p"},"SearchService"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"FacetService"),", etc.), to add the missing data. But this approach is cumbersome and requires more maintenance."),(0,i.kt)("p",null,"A better alternative is to ",(0,i.kt)("em",{parentName:"p"},"intercept")," audit events globally (just before they are sent to the server) and modify them all in this centralized location. This can be achieved by extending the standard ",(0,i.kt)("inlineCode",{parentName:"p"},"AuditInterceptor")," and overriding the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateAuditRecord()")," method."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://angular.io/api/common/http/HttpInterceptor"},"HTTP interceptors")," are a standard way to manipulate HTTP requests and responses globally in Angular. Sinequa includes an interceptor dedicated to audit events. It is provided by default in application samples, such as ",(0,i.kt)("a",{parentName:"p",href:"/dokku/docs/apps/vanilla-search"},"Vanilla Search"),", in the ",(0,i.kt)("inlineCode",{parentName:"p"},"app.module.ts")," file:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"@NgModule({\n    ...,\n    providers: [\n        ...\n        // Provides an HttpInterceptor that offers a centralized location through which all client-side\n        // audit records pass. An application can replace AuditInterceptor with a subclass that overrides\n        // the updateAuditRecord method to add custom audit information to the records.\n        {provide: HTTP_INTERCEPTORS, useClass: AuditInterceptor, multi: true},\n")),(0,i.kt)("p",null,"You can replace this standard interceptor with your custom version:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"{provide: HTTP_INTERCEPTORS, useClass: MyAuditInterceptor, multi: true},\n")),(0,i.kt)("p",null,"This custom interceptor should extend the original version and override the ",(0,i.kt)("inlineCode",{parentName:"p"},"updateAuditRecord()")," method. In the example below, we modify specifically the ",(0,i.kt)("inlineCode",{parentName:"p"},"Search_Text")," audit events to include the query web service's name in the ",(0,i.kt)("inlineCode",{parentName:"p"},"detail")," object."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { Injectable, Inject } from '@angular/core';\nimport { AuditInterceptor } from '@sinequa/core/app-utils';\nimport { AuditRecord, StartConfig, START_CONFIG, AuditEventType } from '@sinequa/core/web-services';\nimport { SearchService } from '@sinequa/components/search';\n\n@Injectable({\n    providedIn: \"root\"\n})\nexport class MyAuditInterceptor extends AuditInterceptor {\n\n    constructor(\n        @Inject(START_CONFIG) startConfig: StartConfig,\n        public searchService: SearchService){\n        super(startConfig);\n    }\n\n    protected updateAuditRecord(auditRecord?: AuditRecord) {\n        auditRecord?.auditEvents?.forEach(event => {\n            if(event.type === AuditEventType.Search_Text && event.detail) {\n                event.detail.queryWS = this.searchService.query.name;\n            }\n        });\n    }\n}\n")))}u.isMDXComponent=!0},63241:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/audit-schema-9c5ebbac070bd71e0a37b0bf5e12e7f2.png"},82193:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/audit-webapp-8af63d20638315f765cf82e0dc4d17fe.png"}}]);