"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6987],{36335:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var n=s(74848),i=s(28453);const o={layout:"default",title:"Autocomplete Module",parent:"Components",grand_parent:"Libraries",sidebar_position:10},r="Autocomplete Module",c={id:"libraries/components/autocomplete",title:"Autocomplete Module",description:"The Autocomplete module is also documented in the tutorial.",source:"@site/docs/libraries/components/autocomplete.md",sourceDirName:"libraries/components",slug:"/libraries/components/autocomplete",permalink:"/dokku/docs/libraries/components/autocomplete",draft:!1,unlisted:!1,editUrl:"https://github.com/sinequa/sba-angular/tree/main/docs/libraries/components/autocomplete.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{layout:"default",title:"Autocomplete Module",parent:"Components",grand_parent:"Libraries",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"User Settings Modules",permalink:"/dokku/docs/libraries/components/user-settings"},next:{title:"Sinequa Theme",permalink:"/dokku/docs/libraries/components/theme"}},l={},d=[{value:"Features",id:"features",level:2},{value:"Standard features",id:"standard-features",level:3},{value:"Import",id:"import",level:2},{value:"Standard Autocomplete",id:"standard-autocomplete",level:2},{value:"Autocomplete Directive",id:"autocomplete-directive",level:3},{value:"Suggest Service",id:"suggest-service",level:3},{value:"Autocomplete List Component",id:"autocomplete-list-component",level:3},{value:"Server-side configuration",id:"server-side-configuration",level:2},{value:"Suggest Query Web Service",id:"suggest-query-web-service",level:3},{value:"Suggest Field Web Service",id:"suggest-field-web-service",level:3}];function a(e){const t={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"autocomplete-module",children:"Autocomplete Module"}),"\n",(0,n.jsxs)(t.p,{children:["The Autocomplete module is also documented in the ",(0,n.jsx)(t.a,{href:"/dokku/docs/tutorial/autocomplete",children:"tutorial"}),"."]}),"\n",(0,n.jsx)(t.h2,{id:"features",children:"Features"}),"\n",(0,n.jsx)(t.h3,{id:"standard-features",children:"Standard features"}),"\n",(0,n.jsx)(t.p,{children:"This module provides functionality to display an autocomplete dropdown panel under a search form:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["A ",(0,n.jsx)(t.strong,{children:"directive"})," applied to the form's ",(0,n.jsx)(t.code,{children:"<input>"})," to listen to user inputs, send autocomplete queries and process the results."]}),"\n",(0,n.jsxs)(t.li,{children:["A ",(0,n.jsx)(t.strong,{children:"service"})," that sends the autocomplete queries to the backend server and provides additional services."]}),"\n",(0,n.jsxs)(t.li,{children:["A ",(0,n.jsx)(t.strong,{children:"component"})," that displays these results (styled with the ",(0,n.jsx)(t.a,{href:"https://getbootstrap.com/",children:"Bootstrap"})," library)."]}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Both the directive and the component are largely extensible and customizable (See ",(0,n.jsx)(t.a,{href:"/dokku/docs/apps/vanilla-search",children:"Vanilla Search"}),")."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Autocomplete",src:s(67486).A+"",width:"606",height:"329"})}),"\n",(0,n.jsx)(t.p,{children:"Schematically, the code looks as follow:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-html",children:'<form>\n\n    <input type="text" sqAutocomplete [dropdown]="mydropdown">\n\n    <button type="submit">Search</button>\n\n    <sq-autocomplete-list #mydropdown>\n        <ng-template #itemTpl let-item>\n            {{ item.display }}\n        </ng-template>\n    </sq-autocomplete-list>\n\n</form>\n'})}),"\n",(0,n.jsx)(t.h2,{id:"import",children:"Import"}),"\n",(0,n.jsxs)(t.p,{children:["Import this module in your ",(0,n.jsx)(t.code,{children:"app.module.ts"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-ts",children:"import { BsAutocompleteModule } from '@sinequa/components/autocomplete';\n\n@NgModule({\n  imports: [\n    ...\n    BsAutocompleteModule\n"})}),"\n",(0,n.jsx)(t.h2,{id:"standard-autocomplete",children:"Standard Autocomplete"}),"\n",(0,n.jsx)(t.h3,{id:"autocomplete-directive",children:"Autocomplete Directive"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"sqAutocomplete"})," directive (applied to the ",(0,n.jsx)(t.code,{children:"<input>"})," element) listens to user interactions (keyboard inputs, mouse inputs, blur and focus events), sends autocomplete queries to the backend (via the ",(0,n.jsx)(t.code,{children:"SuggestService"}),") and controls the dropdown component (what to display, when to display it and what to do when an item is selected)."]}),"\n",(0,n.jsx)(t.p,{children:"The directive has several inputs:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"dropdown"}),": A reference to the dropdown component. This component is not necessarily ",(0,n.jsx)(t.code,{children:"sq-autocomplete-list"}),", but it needs to implement the ",(0,n.jsx)(t.code,{children:"AutocompleteComponent"})," interface."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"suggestQuery"}),': The name of the "Suggest Query" configured on the server. This value can be hard-coded, or provided by via the ',(0,n.jsx)(t.code,{children:"AppService.suggestQueries"})," list (post-login)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"off"})," (default: ",(0,n.jsx)(t.code,{children:"false"}),"): Whether the directive is turned off or not."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"suggestDelay"})," (default: ",(0,n.jsx)(t.code,{children:"200"}),"): Number of milliseconds between queries sent to the server."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"placeholder"})," (default: ",(0,n.jsx)(t.code,{children:"''"}),"): Placeholder to display when no text is written in the input."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"It also provides the following outputs (Event emitters):"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"stateChange"}),": Emits the state of the autocomplete (",(0,n.jsx)(t.code,{children:"OFF"}),", ",(0,n.jsx)(t.code,{children:"INIT"}),", ",(0,n.jsx)(t.code,{children:"START"}),", ",(0,n.jsx)(t.code,{children:"ACTIVE"}),", ",(0,n.jsx)(t.code,{children:"OPENED"}),", ",(0,n.jsx)(t.code,{children:"SELECTED"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"submit"}),': Fires when the users "submits" the query (by typing Enter)']}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["Of course, other attributes and directives may be applied along with the ",(0,n.jsx)(t.code,{children:"sqAutocomplete"})," directive. For example we may have the following:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-html",children:'<input type="text"\n    formControlName="search"\n    class="form-control"\n    spellcheck="false"\n    autocomplete="off"\n\n    [sqAutofocus]="autofocus"\n\n    sqAutocomplete\n    [placeholder]="\'msg#searchForm.searchFor\' | sqMessage"\n    [dropdown]="dropdown"\n    [off]="!loginService.complete || !appService.suggestQueries"\n    [suggestQuery]="appService.suggestQueries? appService.suggestQueries[0] : \'\'"\n    (submit)="search()">\n'})}),"\n",(0,n.jsx)(t.p,{children:"You can customize the behavior of the directive by extending it and enriching it. The following methods can be overridden:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"getSuggests()"}),": Takes the text typed by the user to get suggestions (via ",(0,n.jsx)(t.code,{children:"getSuggestsObs()"}),") and pass them to ",(0,n.jsx)(t.code,{children:"processSuggests()"}),". This method can be overridden to modify the text read in the input element and passed to ",(0,n.jsx)(t.code,{children:"getSuggestObs()"}),"."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"getSuggestsObs()"}),": Makes a call to the ",(0,n.jsx)(t.code,{children:"SuggestService"})," to obtain suggestions (which are then passed to ",(0,n.jsx)(t.code,{children:"processSuggests()"}),"). It can be overridden to obtain suggestions in a different way (this is the case in ",(0,n.jsx)(t.a,{href:"/dokku/docs/apps/vanilla-search",children:"Vanilla Search"}),")."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"processSuggests(items)"}),": Update the dropdown component with the suggestions. This method can be overridden to post process or filters the suggestions before they are displayed."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"select(item)"})," or ",(0,n.jsx)(t.code,{children:"setAutocompleteItem(item)"}),": Methods called when an item is selected from the dropdown panel (either with the mouse or keyboard navigation). By default, the ",(0,n.jsx)(t.code,{children:"<input>"})," text is set to the value of the autocomplete item, but other behavior can be implemented (opening a document, searching a custom query, etc.; this is the case in ",(0,n.jsx)(t.a,{href:"/dokku/docs/apps/vanilla-search",children:"Vanilla Search"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["State change methods: ",(0,n.jsx)(t.code,{children:"init()"}),", ",(0,n.jsx)(t.code,{children:"start()"}),", ",(0,n.jsx)(t.code,{children:"active()"}),", ",(0,n.jsx)(t.code,{children:"open()"}),", ",(0,n.jsx)(t.code,{children:"select()"}),". They can be overridden to insert new states or execute some custom code in specific states."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"The transition between the different states is depicted below:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Autocomplete states",src:s(38363).A+"",width:"1669",height:"251"})}),"\n",(0,n.jsx)(t.h3,{id:"suggest-service",children:"Suggest Service"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"SuggestService"})," provides the following methods:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"get(suggestQuery: string, text: string, fields?: string | string[], query?: Query, maxCount = 10): Observable<ScoredAutocompleteItem<undefined,string>[]>"}),":"]}),"\n",(0,n.jsxs)(t.p,{children:["This method uses both ",(0,n.jsx)(t.code,{children:"SuggestQueryWebService"})," and ",(0,n.jsx)(t.code,{children:"SuggestFieldWebService"})," to obtain suggestions from the server. It combines actual suggestions from suggest queries with suggestions of fields (when fielded search is active)."]}),"\n"]}),"\n",(0,n.jsxs)(t.li,{children:["\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"async searchData<T, Tcat extends string>(category: Tcat, query: string, data: T[], primaryText: (obj:T) => string, secondaryText?: (obj:T) => string[], label?: string) : Promise<ScoredAutocompleteItem<T, Tcat>[]>"}),":"]}),"\n",(0,n.jsxs)(t.p,{children:["This method allows to search within a list of objects of any type (",(0,n.jsx)(t.code,{children:"T"}),"). It is useful to search within a small number of user objects on the client side. For example, in ",(0,n.jsx)(t.a,{href:"/dokku/docs/apps/vanilla-search",children:"Vanilla Search"}),", it is used to search within the recent queries, recent documents, saved queries and baskets."]}),"\n",(0,n.jsx)(t.p,{children:"It expects the following inputs:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"category"}),": The name of the ",(0,n.jsx)(t.code,{children:"AutocompleteItem"})," category to be created as a result of this search."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"query"}),": The text you want to search for."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"data"}),": The list of objects you want to search in."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"primaryText"}),": A function that takes in an object and outputs the primary text field to search in (eg. if objects are records, the primary field could be the title)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"secondaryText"})," (optional): A function that takes in an object and outputs a list of secondary text fields to search in."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"label"})," (optional): The label of the ",(0,n.jsx)(t.code,{children:"AutocompleteItem"})," category to be created as a result of this search."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"autocomplete-list-component",children:"Autocomplete List Component"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"sq-autocomplete-list"})," component is a fairly simple component that displays the list of suggestions from the directive. This component expects a ",(0,n.jsx)(t.code,{children:"ng-template"})," named ",(0,n.jsx)(t.code,{children:"#itemTpl"})," to be passed by transclusion, to actually display the items:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-html",children:"<sq-autocomplete-list #mydropdown>\n    <ng-template #itemTpl let-item>\n        {{ item.display }}\n    </ng-template>\n</sq-autocomplete-list>\n"})}),"\n",(0,n.jsxs)(t.p,{children:["In the ",(0,n.jsx)(t.a,{href:"/dokku/docs/apps/vanilla-search",children:"Vanilla Search"})," application, the template (in ",(0,n.jsx)(t.a,{href:"https://github.com/sinequa/sba-angular/blob/master/projects/vanilla-search/src/app/search-form/search-form.component.html",children:"search-form.component.html"}),") looks like this:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-html",children:'<ng-template #itemTpl let-item>\n    <div class="autocomplete-item p-2">\n        <i class="{{autocompleteIcon(item.category)}}"></i>\x3c!--\n        --\x3e<span class="mx-2" [innerHTML]="item.displayHtml || item.display"></span>\x3c!--\n        --\x3e<small *ngIf="item.category" class="autocomplete-category ml-2">{{(item.label || item.category) | sqMessage}}</small>\n    </div>\n</ng-template>\n'})}),"\n",(0,n.jsxs)(t.p,{children:["You can customize the component by customizing the content of",(0,n.jsx)(t.code,{children:"#itemTpl"}),". Note that ",(0,n.jsx)(t.code,{children:"item"})," is an ",(0,n.jsx)(t.code,{children:"AutocompleteItem"})," passed by the directive."]}),"\n",(0,n.jsx)(t.p,{children:"You can also write you own component entirely, as long as:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["You tag it and pass it to the directive (",(0,n.jsx)(t.code,{children:"#mydropdown"})," in the example above)."]}),"\n",(0,n.jsxs)(t.li,{children:["Your component implements the ",(0,n.jsx)(t.code,{children:"AutocompleteComponent"})," interface. This interface requires you to implement the following methods:","\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"hasItems(boolean)"}),": Whether there are any item to display"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"clicked(EventEmitter<AutocompleteItem>)"}),": Event emitter for clicks on an autocomplete item"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"selectedValue(AutocompleteItem)"}),": The currently selected item, if any"]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"update(active: boolean, items?: AutocompleteItem[])"}),": Method called to pass data to this component. If ",(0,n.jsx)(t.code,{children:"active==false"}),", the component should be closed."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"selectNext()"}),": Select and return the next ",(0,n.jsx)(t.code,{children:"AutocompleteItem"})," in the list."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"selectPrevious()"}),": Select and return the previous ",(0,n.jsx)(t.code,{children:"AutocompleteItem"})," in the list."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"server-side-configuration",children:"Server-side configuration"}),"\n",(0,n.jsx)(t.p,{children:"The autocomplete functionality is built on top of two web services of the Sinequa REST API:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:["Suggest Query Web Service (",(0,n.jsx)(t.code,{children:"api/v1/suggestquery"}),")"]}),"\n",(0,n.jsxs)(t.li,{children:["Suggest Field Web Service (",(0,n.jsx)(t.code,{children:"api/v1/suggestfield"}),")"]}),"\n"]}),"\n",(0,n.jsx)(t.h3,{id:"suggest-query-web-service",children:"Suggest Query Web Service"}),"\n",(0,n.jsxs)(t.p,{children:["The Suggest Query web service uses a ",(0,n.jsx)(t.strong,{children:"Suggestion Query"})," configured on the Sinequa server to generate suggestions. These queries can be created and managed in the Sinequa administration, under ",(0,n.jsx)(t.em,{children:"Search-Based Applications > App Dependencies > Suggestion Queries"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.img,{alt:"Suggest query",src:s(38045).A+"",width:"1096",height:"615"}),"\n",(0,n.jsx)(t.em,{children:"Standard configuration of a Suggestion Query"})]}),"\n",(0,n.jsxs)(t.p,{children:["A suggestion query is associated to a ",(0,n.jsx)(t.strong,{children:"Suggestion Lexicon"}),". The lexicon contains all the terms which can be used as suggestions. These terms are generated from the index content, and each one belongs in a ",(0,n.jsx)(t.strong,{children:'"kind"'})," (by default the kind just corresponds to the name of the column from which the term is extracted)."]}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.img,{alt:"Suggest lexicon",src:s(32168).A+"",width:"740",height:"232"}),"\n",(0,n.jsx)(t.em,{children:"Configuration of a suggestion lexicon"})]}),"\n",(0,n.jsxs)(t.p,{children:['The "kind" (or "category") is important, as it is used in fielded search to request suggestions for a specific field. For example, when autocompleting the field ',(0,n.jsx)(t.code,{children:"company"}),", we do not want ",(0,n.jsx)(t.em,{children:"any"}),' kind of suggestion: We want only suggestions belonging to the "company" kind / category.']}),"\n",(0,n.jsxs)(t.p,{children:["\u26a0\ufe0f Be careful, as there are typically some differences the between the column names defined in the suggest lexicon and the field names used in your SBA, because of ",(0,n.jsx)(t.strong,{children:"aliases"}),'. If you define an alias for the field "company" (and you want this field to be autocompleted), it might be a good idea to use the same alias for the "kind" of this column in the lexicon.']}),"\n",(0,n.jsx)(t.h3,{id:"suggest-field-web-service",children:"Suggest Field Web Service"}),"\n",(0,n.jsx)(t.p,{children:'When we request the Suggest Query web service for a specific "kind", but no results are returned, the Suggest Field Web Service is used as a fallback.'}),"\n",(0,n.jsxs)(t.p,{children:["The Suggest Field web service does not use a lexicon to create suggestions. Instead, it directly queries the engine for data, using a ",(0,n.jsx)(t.strong,{children:"distribution"}),", and using the ",(0,n.jsx)(t.code,{children:"prefixes"})," option to filter the searched text. If you search suggestions for the field ",(0,n.jsx)(t.code,{children:"person"}),", the requests look as follow:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"SELECT DISTRIBUTION('person,count=100,basicforms=true,order2=labelasc,labels=true,prefixes=\"Barack Oba\",caseinsensitive=true') AS dist FROM index WHERE <security clause> AND entity17 CONTAINS 'Barack Oba*' COUNT 1\n"})}),"\n",(0,n.jsx)(t.p,{children:"There are various benefits to this approach:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"The data is always up-to-date. No need to refresh a lexicon."}),"\n",(0,n.jsx)(t.li,{children:"This service is built-in and has no configuration attached."}),"\n",(0,n.jsxs)(t.li,{children:["We can search in the context of a ",(0,n.jsx)(t.strong,{children:"query"})," (adding to the ",(0,n.jsx)(t.code,{children:"WHERE"})," clause), which means the data is more relevant and secured."]}),"\n",(0,n.jsxs)(t.li,{children:["Also note that unlike the Suggest Query web service, this service resolves SBA aliases. (So if you defined an alias for the field ",(0,n.jsx)(t.code,{children:"person"}),", the service knows it should actually request the engine for the ",(0,n.jsx)(t.code,{children:"person"})," column)."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"However, this approach means more requests are sent to the engine, which can hinder performance. Also, the completion is limited to a simple prefix approach, unlike the Suggest queries and lexicons which have many options to manage more complex completion strategies."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(a,{...e})}):a(e)}},38363:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/autocomplete-states-bb7a221ab74a0cce7b17bf76800819fb.png"},67486:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/autocomplete-55ef0e7f3fd1f39003089334231a1b16.png"},32168:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/lexicon-d790ad9358a9e5d8476eddbff94c55ad.png"},38045:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/suggest-query-8b06d87b45336ddbc612554b994667af.png"},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>c});var n=s(96540);const i={},o=n.createContext(i);function r(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);