"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5598],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),m=p(n),d=i,h=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,l=new Array(o);l[0]=d;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[m]="string"==typeof e?e:i,l[1]=r;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},42946:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));const o={layout:"default",title:"Autocomplete Module",parent:"Components",grand_parent:"Libraries",sidebar_position:10},l="Autocomplete Module",r={unversionedId:"libraries/components/autocomplete",id:"libraries/components/autocomplete",title:"Autocomplete Module",description:"The Autocomplete module is also documented in the tutorial.",source:"@site/docs/libraries/components/autocomplete.md",sourceDirName:"libraries/components",slug:"/libraries/components/autocomplete",permalink:"/dokku/docs/libraries/components/autocomplete",draft:!1,editUrl:"https://github.com/hebus/dokku/tree/main/docs/libraries/components/autocomplete.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{layout:"default",title:"Autocomplete Module",parent:"Components",grand_parent:"Libraries",sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"User Settings Modules",permalink:"/dokku/docs/libraries/components/user-settings"},next:{title:"Sinequa Theme",permalink:"/dokku/docs/libraries/components/theme"}},s={},p=[{value:"Features",id:"features",level:2},{value:"Standard features",id:"standard-features",level:3},{value:"Import",id:"import",level:2},{value:"Standard Autocomplete",id:"standard-autocomplete",level:2},{value:"Autocomplete Directive",id:"autocomplete-directive",level:3},{value:"Suggest Service",id:"suggest-service",level:3},{value:"Autocomplete List Component",id:"autocomplete-list-component",level:3},{value:"Server-side configuration",id:"server-side-configuration",level:2},{value:"Suggest Query Web Service",id:"suggest-query-web-service",level:3},{value:"Suggest Field Web Service",id:"suggest-field-web-service",level:3}],u={toc:p},m="wrapper";function c(e){let{components:t,...o}=e;return(0,i.kt)(m,(0,a.Z)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"autocomplete-module"},"Autocomplete Module"),(0,i.kt)("p",null,"The Autocomplete module is also documented in the ",(0,i.kt)("a",{parentName:"p",href:"/dokku/docs/tutorial/autocomplete"},"tutorial"),"."),(0,i.kt)("h2",{id:"features"},"Features"),(0,i.kt)("h3",{id:"standard-features"},"Standard features"),(0,i.kt)("p",null,"This module provides functionality to display an autocomplete dropdown panel under a search form:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"directive")," applied to the form's ",(0,i.kt)("inlineCode",{parentName:"li"},"<input>")," to listen to user inputs, send autocomplete queries and process the results."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"service")," that sends the autocomplete queries to the backend server and provides additional services."),(0,i.kt)("li",{parentName:"ul"},"A ",(0,i.kt)("strong",{parentName:"li"},"component")," that displays these results (styled with the ",(0,i.kt)("a",{parentName:"li",href:"https://getbootstrap.com/"},"Bootstrap")," library).")),(0,i.kt)("p",null,"Both the directive and the component are largely extensible and customizable (See ",(0,i.kt)("a",{parentName:"p",href:"/dokku/docs/apps/vanilla-search"},"Vanilla Search"),")."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Autocomplete",src:n(17046).Z,width:"606",height:"329"}),"{: .d-block .mx-auto }"),(0,i.kt)("p",null,"Schematically, the code looks as follow:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<form>\n\n    <input type="text" sqAutocomplete [dropdown]="mydropdown">\n\n    <button type="submit">Search</button>\n\n    <sq-autocomplete-list #mydropdown>\n        <ng-template #itemTpl let-item>\n            {{ item.display }}\n        </ng-template>\n    </sq-autocomplete-list>\n\n</form>\n')),(0,i.kt)("h2",{id:"import"},"Import"),(0,i.kt)("p",null,"Import this module in your ",(0,i.kt)("inlineCode",{parentName:"p"},"app.module.ts"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { BsAutocompleteModule } from '@sinequa/components/autocomplete';\n\n@NgModule({\n  imports: [\n    ...\n    BsAutocompleteModule\n")),(0,i.kt)("h2",{id:"standard-autocomplete"},"Standard Autocomplete"),(0,i.kt)("h3",{id:"autocomplete-directive"},"Autocomplete Directive"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sqAutocomplete")," directive (applied to the ",(0,i.kt)("inlineCode",{parentName:"p"},"<input>")," element) listens to user interactions (keyboard inputs, mouse inputs, blur and focus events), sends autocomplete queries to the backend (via the ",(0,i.kt)("inlineCode",{parentName:"p"},"SuggestService"),") and controls the dropdown component (what to display, when to display it and what to do when an item is selected)."),(0,i.kt)("p",null,"The directive has several inputs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dropdown"),": A reference to the dropdown component. This component is not necessarily ",(0,i.kt)("inlineCode",{parentName:"li"},"sq-autocomplete-list"),", but it needs to implement the ",(0,i.kt)("inlineCode",{parentName:"li"},"AutocompleteComponent")," interface."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"suggestQuery"),': The name of the "Suggest Query" configured on the server. This value can be hard-coded, or provided by via the ',(0,i.kt)("inlineCode",{parentName:"li"},"AppService.suggestQueries")," list (post-login)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"off")," (default: ",(0,i.kt)("inlineCode",{parentName:"li"},"false"),"): Whether the directive is turned off or not."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"suggestDelay")," (default: ",(0,i.kt)("inlineCode",{parentName:"li"},"200"),"): Number of milliseconds between queries sent to the server."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"placeholder")," (default: ",(0,i.kt)("inlineCode",{parentName:"li"},"''"),"): Placeholder to display when no text is written in the input.")),(0,i.kt)("p",null,"It also provides the following outputs (Event emitters):"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"stateChange"),": Emits the state of the autocomplete (",(0,i.kt)("inlineCode",{parentName:"li"},"OFF"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"INIT"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"START"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"ACTIVE"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"OPENED"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"SELECTED"),")"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"submit"),': Fires when the users "submits" the query (by typing Enter)')),(0,i.kt)("p",null,"Of course, other attributes and directives may be applied along with the ",(0,i.kt)("inlineCode",{parentName:"p"},"sqAutocomplete")," directive. For example we may have the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<input type="text"\n    formControlName="search"\n    class="form-control"\n    spellcheck="false"\n    autocomplete="off"\n\n    [sqAutofocus]="autofocus"\n\n    sqAutocomplete\n    [placeholder]="\'msg#searchForm.searchFor\' | sqMessage"\n    [dropdown]="dropdown"\n    [off]="!loginService.complete || !appService.suggestQueries"\n    [suggestQuery]="appService.suggestQueries? appService.suggestQueries[0] : \'\'"\n    (submit)="search()">\n')),(0,i.kt)("p",null,"You can customize the behavior of the directive by extending it and enriching it. The following methods can be overridden:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getSuggests()"),": Takes the text typed by the user to get suggestions (via ",(0,i.kt)("inlineCode",{parentName:"li"},"getSuggestsObs()"),") and pass them to ",(0,i.kt)("inlineCode",{parentName:"li"},"processSuggests()"),". This method can be overridden to modify the text read in the input element and passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"getSuggestObs()"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"getSuggestsObs()"),": Makes a call to the ",(0,i.kt)("inlineCode",{parentName:"li"},"SuggestService")," to obtain suggestions (which are then passed to ",(0,i.kt)("inlineCode",{parentName:"li"},"processSuggests()"),"). It can be overridden to obtain suggestions in a different way (this is the case in ",(0,i.kt)("a",{parentName:"li",href:"/dokku/docs/apps/vanilla-search"},"Vanilla Search"),")."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"processSuggests(items)"),": Update the dropdown component with the suggestions. This method can be overridden to post process or filters the suggestions before they are displayed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"select(item)")," or ",(0,i.kt)("inlineCode",{parentName:"li"},"setAutocompleteItem(item)"),": Methods called when an item is selected from the dropdown panel (either with the mouse or keyboard navigation). By default, the ",(0,i.kt)("inlineCode",{parentName:"li"},"<input>")," text is set to the value of the autocomplete item, but other behavior can be implemented (opening a document, searching a custom query, etc.; this is the case in ",(0,i.kt)("a",{parentName:"li",href:"/dokku/docs/apps/vanilla-search"},"Vanilla Search"),")"),(0,i.kt)("li",{parentName:"ul"},"State change methods: ",(0,i.kt)("inlineCode",{parentName:"li"},"init()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"start()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"active()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"open()"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"select()"),". They can be overridden to insert new states or execute some custom code in specific states.")),(0,i.kt)("p",null,"The transition between the different states is depicted below:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Autocomplete states",src:n(61602).Z,width:"1669",height:"251"}),"{: .d-block .mx-auto }"),(0,i.kt)("h3",{id:"suggest-service"},"Suggest Service"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SuggestService")," provides the following methods:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"get(suggestQuery: string, text: string, fields?: string | string[], query?: Query, maxCount = 10): Observable<ScoredAutocompleteItem<undefined,string>[]>"),":"),(0,i.kt)("p",{parentName:"li"},"  This method uses both ",(0,i.kt)("inlineCode",{parentName:"p"},"SuggestQueryWebService")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"SuggestFieldWebService")," to obtain suggestions from the server. It combines actual suggestions from suggest queries with suggestions of fields (when fielded search is active).")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"async searchData<T, Tcat extends string>(category: Tcat, query: string, data: T[], primaryText: (obj:T) => string, secondaryText?: (obj:T) => string[], label?: string) : Promise<ScoredAutocompleteItem<T, Tcat>[]>"),":"),(0,i.kt)("p",{parentName:"li"},"  This method allows to search within a list of objects of any type (",(0,i.kt)("inlineCode",{parentName:"p"},"T"),"). It is useful to search within a small number of user objects on the client side. For example, in ",(0,i.kt)("a",{parentName:"p",href:"/dokku/docs/apps/vanilla-search"},"Vanilla Search"),", it is used to search within the recent queries, recent documents, saved queries and baskets."),(0,i.kt)("p",{parentName:"li"},"  It expects the following inputs:"),(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"category"),": The name of the ",(0,i.kt)("inlineCode",{parentName:"li"},"AutocompleteItem")," category to be created as a result of this search."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"query"),": The text you want to search for."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"data"),": The list of objects you want to search in."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"primaryText"),": A function that takes in an object and outputs the primary text field to search in (eg. if objects are records, the primary field could be the title)."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"secondaryText")," (optional): A function that takes in an object and outputs a list of secondary text fields to search in."),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("inlineCode",{parentName:"li"},"label")," (optional): The label of the ",(0,i.kt)("inlineCode",{parentName:"li"},"AutocompleteItem")," category to be created as a result of this search.")))),(0,i.kt)("h3",{id:"autocomplete-list-component"},"Autocomplete List Component"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"sq-autocomplete-list")," component is a fairly simple component that displays the list of suggestions from the directive. This component expects a ",(0,i.kt)("inlineCode",{parentName:"p"},"ng-template")," named ",(0,i.kt)("inlineCode",{parentName:"p"},"#itemTpl")," to be passed by transclusion, to actually display the items:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},"<sq-autocomplete-list #mydropdown>\n    <ng-template #itemTpl let-item>\n        {{ item.display }}\n    </ng-template>\n</sq-autocomplete-list>\n")),(0,i.kt)("p",null,"In the ",(0,i.kt)("a",{parentName:"p",href:"/dokku/docs/apps/vanilla-search"},"Vanilla Search")," application, the template (in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/sinequa/sba-angular/blob/master/projects/vanilla-search/src/app/search-form/search-form.component.html"},"search-form.component.html"),") looks like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-html"},'<ng-template #itemTpl let-item>\n    <div class="autocomplete-item p-2">\n        <i class="{{autocompleteIcon(item.category)}}"></i>\x3c!--\n        --\x3e<span class="mx-2" [innerHTML]="item.displayHtml || item.display"></span>\x3c!--\n        --\x3e<small *ngIf="item.category" class="autocomplete-category ml-2">{{(item.label || item.category) | sqMessage}}</small>\n    </div>\n</ng-template>\n')),(0,i.kt)("p",null,"You can customize the component by customizing the content of",(0,i.kt)("inlineCode",{parentName:"p"},"#itemTpl"),". Note that ",(0,i.kt)("inlineCode",{parentName:"p"},"item")," is an ",(0,i.kt)("inlineCode",{parentName:"p"},"AutocompleteItem")," passed by the directive."),(0,i.kt)("p",null,"You can also write you own component entirely, as long as:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"You tag it and pass it to the directive (",(0,i.kt)("inlineCode",{parentName:"li"},"#mydropdown")," in the example above)."),(0,i.kt)("li",{parentName:"ul"},"Your component implements the ",(0,i.kt)("inlineCode",{parentName:"li"},"AutocompleteComponent")," interface. This interface requires you to implement the following methods:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hasItems(boolean)"),": Whether there are any item to display"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"clicked(EventEmitter<AutocompleteItem>)"),": Event emitter for clicks on an autocomplete item"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"selectedValue(AutocompleteItem)"),": The currently selected item, if any"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"update(active: boolean, items?: AutocompleteItem[])"),": Method called to pass data to this component. If ",(0,i.kt)("inlineCode",{parentName:"li"},"active==false"),", the component should be closed."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"selectNext()"),": Select and return the next ",(0,i.kt)("inlineCode",{parentName:"li"},"AutocompleteItem")," in the list."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"selectPrevious()"),": Select and return the previous ",(0,i.kt)("inlineCode",{parentName:"li"},"AutocompleteItem")," in the list.")))),(0,i.kt)("h2",{id:"server-side-configuration"},"Server-side configuration"),(0,i.kt)("p",null,"The autocomplete functionality is built on top of two web services of the Sinequa REST API:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Suggest Query Web Service (",(0,i.kt)("inlineCode",{parentName:"li"},"api/v1/suggestquery"),")"),(0,i.kt)("li",{parentName:"ul"},"Suggest Field Web Service (",(0,i.kt)("inlineCode",{parentName:"li"},"api/v1/suggestfield"),")")),(0,i.kt)("h3",{id:"suggest-query-web-service"},"Suggest Query Web Service"),(0,i.kt)("p",null,"The Suggest Query web service uses a ",(0,i.kt)("strong",{parentName:"p"},"Suggestion Query")," configured on the Sinequa server to generate suggestions. These queries can be created and managed in the Sinequa administration, under ",(0,i.kt)("em",{parentName:"p"},"Search-Based Applications > App Dependencies > Suggestion Queries"),"."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Suggest query",src:n(74934).Z,width:"1096",height:"615"}),"{: .d-block .mx-auto }\n",(0,i.kt)("em",{parentName:"p"},"Standard configuration of a Suggestion Query"),"\n{: .text-center }"),(0,i.kt)("p",null,"A suggestion query is associated to a ",(0,i.kt)("strong",{parentName:"p"},"Suggestion Lexicon"),". The lexicon contains all the terms which can be used as suggestions. These terms are generated from the index content, and each one belongs in a ",(0,i.kt)("strong",{parentName:"p"},'"kind"')," (by default the kind just corresponds to the name of the column from which the term is extracted)."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Suggest lexicon",src:n(40328).Z,width:"740",height:"232"}),"{: .d-block .mx-auto }\n",(0,i.kt)("em",{parentName:"p"},"Configuration of a suggestion lexicon"),"\n{: .text-center }"),(0,i.kt)("p",null,'The "kind" (or "category") is important, as it is used in fielded search to request suggestions for a specific field. For example, when autocompleting the field ',(0,i.kt)("inlineCode",{parentName:"p"},"company"),", we do not want ",(0,i.kt)("em",{parentName:"p"},"any"),' kind of suggestion: We want only suggestions belonging to the "company" kind / category.'),(0,i.kt)("p",null,"\u26a0\ufe0f Be careful, as there are typically some differences the between the column names defined in the suggest lexicon and the field names used in your SBA, because of ",(0,i.kt)("strong",{parentName:"p"},"aliases"),'. If you define an alias for the field "company" (and you want this field to be autocompleted), it might be a good idea to use the same alias for the "kind" of this column in the lexicon.'),(0,i.kt)("h3",{id:"suggest-field-web-service"},"Suggest Field Web Service"),(0,i.kt)("p",null,'When we request the Suggest Query web service for a specific "kind", but no results are returned, the Suggest Field Web Service is used as a fallback.'),(0,i.kt)("p",null,"The Suggest Field web service does not use a lexicon to create suggestions. Instead, it directly queries the engine for data, using a ",(0,i.kt)("strong",{parentName:"p"},"distribution"),", and using the ",(0,i.kt)("inlineCode",{parentName:"p"},"prefixes")," option to filter the searched text. If you search suggestions for the field ",(0,i.kt)("inlineCode",{parentName:"p"},"person"),", the requests look as follow:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT DISTRIBUTION('person,count=100,basicforms=true,order2=labelasc,labels=true,prefixes=\"Barack Oba\",caseinsensitive=true') AS dist FROM index WHERE <security clause> AND entity17 CONTAINS 'Barack Oba*' COUNT 1\n")),(0,i.kt)("p",null,"There are various benefits to this approach:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The data is always up-to-date. No need to refresh a lexicon."),(0,i.kt)("li",{parentName:"ul"},"This service is built-in and has no configuration attached."),(0,i.kt)("li",{parentName:"ul"},"We can search in the context of a ",(0,i.kt)("strong",{parentName:"li"},"query")," (adding to the ",(0,i.kt)("inlineCode",{parentName:"li"},"WHERE")," clause), which means the data is more relevant and secured."),(0,i.kt)("li",{parentName:"ul"},"Also note that unlike the Suggest Query web service, this service resolves SBA aliases. (So if you defined an alias for the field ",(0,i.kt)("inlineCode",{parentName:"li"},"person"),", the service knows it should actually request the engine for the ",(0,i.kt)("inlineCode",{parentName:"li"},"person")," column).")),(0,i.kt)("p",null,"However, this approach means more requests are sent to the engine, which can hinder performance. Also, the completion is limited to a simple prefix approach, unlike the Suggest queries and lexicons which have many options to manage more complex completion strategies."))}c.isMDXComponent=!0},61602:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/autocomplete-states-bb7a221ab74a0cce7b17bf76800819fb.png"},17046:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/autocomplete-55ef0e7f3fd1f39003089334231a1b16.png"},40328:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/lexicon-d790ad9358a9e5d8476eddbff94c55ad.png"},74934:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/suggest-query-8b06d87b45336ddbc612554b994667af.png"}}]);