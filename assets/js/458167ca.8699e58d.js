"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5127],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var o=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(n),c=a,h=d["".concat(p,".").concat(c)]||d[c]||u[c]||r;return n?o.createElement(h,i(i({ref:t},m),{},{components:n})):o.createElement(h,i({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},49648:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var o=n(87462),a=(n(67294),n(3905));const r={layout:"default",title:"Modal Module",parent:"Core",grand_parent:"Libraries",nav_order:5},i="Modal Module",l={unversionedId:"libraries/core/modal",id:"libraries/core/modal",title:"Modal Module",description:"Features",source:"@site/docs/libraries/core/modal.md",sourceDirName:"libraries/core",slug:"/libraries/core/modal",permalink:"/dokku/docs/libraries/core/modal",draft:!1,editUrl:"https://github.com/hebus/dokku/tree/main/docs/libraries/core/modal.md",tags:[],version:"current",frontMatter:{layout:"default",title:"Modal Module",parent:"Core",grand_parent:"Libraries",nav_order:5},sidebar:"tutorialSidebar",previous:{title:"Login Module",permalink:"/dokku/docs/libraries/core/login"},next:{title:"Notification Module",permalink:"/dokku/docs/libraries/core/notification"}},p={},s=[{value:"Features",id:"features",level:2},{value:"Import",id:"import",level:2},{value:"API usage",id:"api-usage",level:2},{value:"ModalService",id:"modalservice",level:3}],m={toc:s},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,o.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"modal-module"},"Modal Module"),(0,a.kt)("h2",{id:"features"},"Features"),(0,a.kt)("p",null,"This module helps creating popups to inform end-user of an information or to prompt for some input from the user.\nFor example, the popup that is shown when creating a new user alert."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Create alert popup",src:n(96017).Z,width:"1870",height:"905"}),"\n",(0,a.kt)("em",{parentName:"p"},"Create alert popup"),"\n{: .text-center }"),(0,a.kt)("h2",{id:"import"},"Import"),(0,a.kt)("p",null,"Add ",(0,a.kt)("inlineCode",{parentName:"p"},'import { ModalModule } from "@sinequa/core/modal";')," into your ",(0,a.kt)("inlineCode",{parentName:"p"},"app.module.ts"),"."),(0,a.kt)("p",null,"Include ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalModule")," in Angular import declaration of ",(0,a.kt)("inlineCode",{parentName:"p"},"app.module.ts"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"@NgModule({\n    imports: [\n        /*....*/\n        ModalModule.forRoot(),\n        /*....*/\n    ],\n    /*....*/\n})\n")),(0,a.kt)("h2",{id:"api-usage"},"API usage"),(0,a.kt)("p",null,"The most important declaration of this module is the ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService")," which provides ways to rapidly create a popup and\nto wait for the user interaction with the popup."),(0,a.kt)("h3",{id:"modalservice"},"ModalService"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService")," can be injected to your component when you need to inform user or to ask for user interaction\nbefore executing a procedure."),(0,a.kt)("p",null,"The service provides four public methods that creates four commonly types of popup:"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ModalService.oK()")," is the simplest way to create an informative popup."),(0,a.kt)("p",null,"Example 1: a component that create a simple popup with OK button to inform user"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { ModalService } from '@sinequa/core/modal';\n\n@Component({\n  selector: 'my-component',\n  templateUrl: './my.component.html'\n})\nexport class MyComponent {\n\n    constructor(private modalService: ModalService) {\n    }\n\n    /* some component logics */\n\n    private someFunctionThatNeedsToInformUser() {\n        this.modalService.oK('Hello world!');\n    }\n}\n")),(0,a.kt)("p",null,"When the method ",(0,a.kt)("inlineCode",{parentName:"p"},"someFunctionThatNeedsToInformUser()")," is called the following popup appears on the application."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Ok popup",src:n(85990).Z,width:"1372",height:"650"}),"\n",(0,a.kt)("em",{parentName:"p"},"Ok popup"),"\n{: .text-center }"),(0,a.kt)("p",null,"The signature of the method is"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"oK(\n    message: string,                    // The message to display to user, can be internationalized (i18n) message.\n    messageParams?: MessageParams,      // The format parameters for the message if i18n\n    title?: string,                     // The title of the popup, could be i18n message.\n    confirmType = ConfirmType.Success   // The type of the confirmation\n): Promise<ModalResult>                 // A Promise to wait for user interaction\n")),(0,a.kt)("p",null,"The valid values of ",(0,a.kt)("inlineCode",{parentName:"p"},"ConfirmType")," are ",(0,a.kt)("inlineCode",{parentName:"p"},"Success"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Info"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Warning"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Error"),"."),(0,a.kt)("p",null,"The next method is ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService.oKCancel()"),", which creates a popup with two buttons ",(0,a.kt)("strong",{parentName:"p"},"OK")," and ",(0,a.kt)("strong",{parentName:"p"},"Cancel"),"."),(0,a.kt)("p",null,"The signature of the method is"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"oKCancel(\n    message: string,                // The message to display to user, can be internationalized (i18n) message.\n    messageParams?: MessageParams,  // The format parameters for the message if i18n\n    title?: string,                 // The title of the popup, could be i18n message.\n    confirmType = ConfirmType.Info, // The type of the confirmation\n    primaryButton = ModalResult.OK  // The primary button, ie. the auto-focused button, that will be clicked if user clicks Enter directly\n): Promise<ModalResult>             // A Promise to wait for user interaction\n")),(0,a.kt)("p",null,"Example 2: A warning popup with OkCancel"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"this.modalService.oKCancel('Here is some important information', {}, 'Info', ConfirmType.Warning);\n")),(0,a.kt)("p",null,"Which yields"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Ok Cancel popup",src:n(67505).Z,width:"1870",height:"905"}),"\n",(0,a.kt)("em",{parentName:"p"},"Ok Cancel popup"),"\n{: .text-center }"),(0,a.kt)("p",null,"Alternatively, the ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService")," provides the method ",(0,a.kt)("inlineCode",{parentName:"p"},"yesNo()")," to create a popup with two buttons ",(0,a.kt)("strong",{parentName:"p"},"Yes")," and ",(0,a.kt)("strong",{parentName:"p"},"No"),", which is essentially the same as ",(0,a.kt)("inlineCode",{parentName:"p"},"okCancel()")," but with different button naming."),(0,a.kt)("p",null,"The signature of the method is"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"yesNo(\n    message: string,                // The message to display to user, can be internationalized (i18n) message.\n    messageParams?: MessageParams,  // The format parameters for the message if i18n\n    title?: string,                 // The title of the popup, could be i18n message.\n    confirmType = ConfirmType.Info, // The type of the confirmation\n    primaryButton = ModalResult.OK  // The primary button, ie. the auto-focused button, that will be clicked if user clicks Enter directly\n): Promise<ModalResult>             // A Promise to wait for user interaction\n")),(0,a.kt)("p",null,"Example 3: A question popup with YesNo"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"this.modalService.yesNo('Do you want to perform the operation ?', {}, 'Question', ConfirmType.Info);\n")),(0,a.kt)("p",null,"Which yields,"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Yes No popup",src:n(59504).Z,width:"1870",height:"905"}),"\n",(0,a.kt)("em",{parentName:"p"},"Yes No popup"),"\n{: .text-center }"),(0,a.kt)("p",null,"Finally, if you want to create a popup that does not fit in those proposed by ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService"),", you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService.confirm()"),"."),(0,a.kt)("p",null,"The signature of the method is"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"confirm(\n    options: ConfirmOptions // The options to configure the popup modal\n): Promise<ModalResult>     // A Promise to wait for user interaction\n")),(0,a.kt)("p",null,"The input of this method is a ",(0,a.kt)("inlineCode",{parentName:"p"},"ConfirmOptions")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ConfirmOptions {\n    title?: string;                 // The title of the popup, could be i18n message.\n    message: string;                // The message to display to user, can be internationalized (i18n) message.\n    messageParams?: MessageParams;  // The format parameters for the message if i18n\n    confirmType?: ConfirmType;      // The type of the confirmation\n    buttons: ModalButton[];         // The buttons to display on the popup\n}\n")),(0,a.kt)("p",null,"Each button of a popup is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalButton"),",\nwhich can be created by ",(0,a.kt)("inlineCode",{parentName:"p"},"new ModalButtion(options)"),"."),(0,a.kt)("p",null,"The input of the constructor is of type ",(0,a.kt)("inlineCode",{parentName:"p"},"IModalButton")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface IModalButton {\n    result: ModalResult;    // The result associated with the button.\n    primary?: boolean;      // Indicates whether this button is the primary button amongst a set of buttons.\n    text?: string;          // The button text.\n    visible?: boolean;      // Indicates whether the button is currently visible.\n    validation?: FormGroup; // The validation `FormGroup` that should be tested when the button is\n                            // clicked. The button will only perform its `action`\n                            // when the validation is `valid`.\n    anchor?: boolean;       // Indicats whether the button should be rendered with an `<a>` tag\n                            // rather than a `<button>` tag.\n\n    action?: (button: ModalButton) => void; // The action to perform when the button is clicked.\n                                            // Buttons with `result` values other than `Custom`\n                                            // also close the modal.\n}\n")),(0,a.kt)("p",null,"Example 4: A customized popup with ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService.confirm()")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"this.modalService.confirm({\n    title: 'Some random title',\n    message: 'Hello world!',\n    confirmType: ConfirmType.Info,\n    buttons: [\n        new ModalButton({\n            text: 'Yeah wow',\n            action: () => { },\n            result: ModalResult.OK\n        }),\n        new ModalButton({\n            text: 'Whatever',\n            action: () => { },\n            result: ModalResult.Ignore\n        })\n    ]\n});\n")),(0,a.kt)("p",null,"Which yields,"),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Custom popup",src:n(88455).Z,width:"1870",height:"905"}),"\n",(0,a.kt)("em",{parentName:"p"},"Custom popup"),"\n{: .text-center }"),(0,a.kt)("p",null,"All these methods are backed by ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService.open()"),".\nAll the modals displayed by ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService.open()")," are dynamically created, not by including them in the HTML template of the caller component."),(0,a.kt)("p",null,"The signature of this method is"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"open(\n    component: Type<any>,       // The component represents the popup modal to be displayed\n    config: ModalConfig = {}    // The configuration of the popup modal\n): Promise<ModalResult>         // A Promise to wait for user interaction\n")),(0,a.kt)("p",null,"The configuration of a modal is a ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalConfig")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},"interface ModalConfig {\n    panelClass?: string | string[];     // Classes that should be added to the `Overlay` pane.\n    hasBackdrop?: boolean;              // Indicates whether a backdrop should be added when opening the modal.\n    backdropClass?: string | string[];  // Classes that should be added to the backdrop.\n    model?: any;                        // The data model that the modal will operate on.\n    width?: string;                     // The CSS width of the modal.\n    height?: string;                    // The CSS height of the modal.\n    fullscreen?: boolean;               // Indicates whether the modal should occupy the screen width and height.\n                                        // In this case  `width` and `height` are set to `100%`\n                                        // and the `sq-modal-fullscreen` class is added to `panelClass`\n    closeOnBackdropClick?: boolean;     // Indicates whether a click on the backdrop should close the modal. The default value is `true`.\n}\n")),(0,a.kt)("p",null,"As it is shown in the signature of ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService.open()"),", any component can be hoisted by this method as a popup modal in the application.\nThe default popup component is injected via the Injection token ",(0,a.kt)("inlineCode",{parentName:"p"},"MODAL_CONFIRM"),".\nYou can change the default popup component in the Angular provider declaration of your ",(0,a.kt)("inlineCode",{parentName:"p"},"app.module.ts"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'import { /*...,*/ MODAL_CONFIRM} from "@sinequa/core/modal";\n\n@NgModule({\n    /*....*/\n    providers: [\n        /*....*/\n        { provide: MODAL_CONFIRM, useValue: MyConfirmComponent }\n        /*....*/\n    ],\n    /*....*/\n})\n')),(0,a.kt)("p",null,"Or you can call your popup component directly with ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService.open()"),"."),(0,a.kt)("p",null,"In effect, many of the popups used by Sinequa components are created using this method. Here are some examples of popup components:"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Component name"),(0,a.kt)("th",{parentName:"tr",align:null},"UI popup"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"BsEditSavedQuery")),(0,a.kt)("td",{parentName:"tr",align:null},"New saved query")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"BsManageSavedQueries")),(0,a.kt)("td",{parentName:"tr",align:null},"Manage saved queries")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"BsEditAlert")),(0,a.kt)("td",{parentName:"tr",align:null},"Alert")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"BsEditBasket")),(0,a.kt)("td",{parentName:"tr",align:null},"Basket")))),(0,a.kt)("p",null,"When hoisting the modal popup with your own component, you may want to transfer data back and forth with the component."),(0,a.kt)("p",null,"For that you need to inject ",(0,a.kt)("inlineCode",{parentName:"p"},"MODAL_MODEL")," into your component, and then transfer the data object to ",(0,a.kt)("inlineCode",{parentName:"p"},"model")," property when calling ",(0,a.kt)("inlineCode",{parentName:"p"},"ModalService.open()"),"."),(0,a.kt)("p",null,"Example 5: transferring data to custom popup component"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'/********* mypopup.component.ts *********/\n\nimport { Component, OnInit, OnDestroy, Inject } from "@angular/core";\nimport { MODAL_MODEL } from "@sinequa/core/modal";\n/* ... */\n@Component({\n    /* ... */\n})\n\nexport class MyPopup implements OnInit, OnDestroy {\n    /* ... */\n    constructor(\n        /* ... */\n        @Inject(MODAL_MODEL) public model: SomeDataObject,\n        /* ... */\n    ) {\n        /* ... */\n    }\n    /* ... */\n}\n\n\n/********* some component calling mypopup.component.ts *********/\n\nimport { Component, OnInit, OnDestroy, Inject } from "@angular/core";\nimport { ModalService, ModalResult, ModalConfig } from "@sinequa/core/modal";\nimport { MyPopup, SomeDataObject } from "the/path/to/mypopup";\n/* ... */\n@Component({\n    /* ... */\n})\n\nexport class MyComponent implements OnInit, OnDestroy {\n    /* ... */\n\n    constructor(\n        /* ... */\n        private modalService: ModalService,\n        /* ... */\n    ) {\n        /* ... */\n    }\n\n    private callMyPopup(): Promise<void> {\n        const data: SomeDataObject = { /* ... */ };\n        const modalConfig: ModalConfig = {\n            /* ... */\n            model: data,\n            /* ... */\n        }\n        this.modalService\n            .open(MyPopup, modalConfig)\n            .then((popupResult: ModalResult) => {\n                switch (modalResult) {\n                    /* react to the modal result*/\n                }\n            });\n    }\n    /* ... */\n}\n')))}u.isMDXComponent=!0},88455:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/modal-custom-7f9461b5d93477a2b8b913333a35a2f6.png"},96017:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/modal-new-alert-6619f421e61dfcb3128912c3100a59d3.png"},85990:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/modal-ok-cafa491b2fd5c6dd06ff919607ced921.png"},67505:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/modal-okcancel-4ff1e5ea37496fb9885df85b2be79df7.png"},59504:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/images/modal-yesno-62f94c8801ec69fc20c4b911264a72b0.png"}}]);