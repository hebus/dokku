"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[354],{80821:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var t=o(74848),s=o(28453);const i={layout:"default",title:"Modal Module",parent:"Core",grand_parent:"Libraries",nav_order:5},r="Modal Module",a={id:"libraries/core/modal",title:"Modal Module",description:"Features",source:"@site/docs/libraries/core/modal.md",sourceDirName:"libraries/core",slug:"/libraries/core/modal",permalink:"/dokku/docs/libraries/core/modal",draft:!1,unlisted:!1,editUrl:"https://github.com/sinequa/sba-angular/tree/main/docs/libraries/core/modal.md",tags:[],version:"current",frontMatter:{layout:"default",title:"Modal Module",parent:"Core",grand_parent:"Libraries",nav_order:5},sidebar:"tutorialSidebar",previous:{title:"Login Module",permalink:"/dokku/docs/libraries/core/login"},next:{title:"Notification Module",permalink:"/dokku/docs/libraries/core/notification"}},l={},d=[{value:"Features",id:"features",level:2},{value:"Import",id:"import",level:2},{value:"API usage",id:"api-usage",level:2},{value:"ModalService",id:"modalservice",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"modal-module",children:"Modal Module"}),"\n",(0,t.jsx)(n.h2,{id:"features",children:"Features"}),"\n",(0,t.jsx)(n.p,{children:"This module helps creating popups to inform end-user of an information or to prompt for some input from the user.\nFor example, the popup that is shown when creating a new user alert."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Create alert popup",src:o(81792).A+"",width:"1870",height:"905"}),"\n",(0,t.jsx)(n.em,{children:"Create alert popup"})]}),"\n",(0,t.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,t.jsxs)(n.p,{children:["Add ",(0,t.jsx)(n.code,{children:'import { ModalModule } from "@sinequa/core/modal";'})," into your ",(0,t.jsx)(n.code,{children:"app.module.ts"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Include ",(0,t.jsx)(n.code,{children:"ModalModule"})," in Angular import declaration of ",(0,t.jsx)(n.code,{children:"app.module.ts"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"@NgModule({\n    imports: [\n        /*....*/\n        ModalModule.forRoot(),\n        /*....*/\n    ],\n    /*....*/\n})\n"})}),"\n",(0,t.jsx)(n.h2,{id:"api-usage",children:"API usage"}),"\n",(0,t.jsxs)(n.p,{children:["The most important declaration of this module is the ",(0,t.jsx)(n.code,{children:"ModalService"})," which provides ways to rapidly create a popup and\nto wait for the user interaction with the popup."]}),"\n",(0,t.jsx)(n.h3,{id:"modalservice",children:"ModalService"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ModalService"})," can be injected to your component when you need to inform user or to ask for user interaction\nbefore executing a procedure."]}),"\n",(0,t.jsx)(n.p,{children:"The service provides four public methods that creates four commonly types of popup:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ModalService.oK()"})," is the simplest way to create an informative popup."]}),"\n",(0,t.jsx)(n.p,{children:"Example 1: a component that create a simple popup with OK button to inform user"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"import { Component, OnInit, Input, OnDestroy } from '@angular/core';\nimport { ModalService } from '@sinequa/core/modal';\n\n@Component({\n  selector: 'my-component',\n  templateUrl: './my.component.html'\n})\nexport class MyComponent {\n\n    constructor(private modalService: ModalService) {\n    }\n\n    /* some component logics */\n\n    private someFunctionThatNeedsToInformUser() {\n        this.modalService.oK('Hello world!');\n    }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When the method ",(0,t.jsx)(n.code,{children:"someFunctionThatNeedsToInformUser()"})," is called the following popup appears on the application."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Ok popup",src:o(30593).A+"",width:"1372",height:"650"}),"\n",(0,t.jsx)(n.em,{children:"Ok popup"})]}),"\n",(0,t.jsx)(n.p,{children:"The signature of the method is"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"oK(\n    message: string,                    // The message to display to user, can be internationalized (i18n) message.\n    messageParams?: MessageParams,      // The format parameters for the message if i18n\n    title?: string,                     // The title of the popup, could be i18n message.\n    confirmType = ConfirmType.Success   // The type of the confirmation\n): Promise<ModalResult>                 // A Promise to wait for user interaction\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The valid values of ",(0,t.jsx)(n.code,{children:"ConfirmType"})," are ",(0,t.jsx)(n.code,{children:"Success"}),", ",(0,t.jsx)(n.code,{children:"Info"}),", ",(0,t.jsx)(n.code,{children:"Warning"}),", ",(0,t.jsx)(n.code,{children:"Error"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The next method is ",(0,t.jsx)(n.code,{children:"ModalService.oKCancel()"}),", which creates a popup with two buttons ",(0,t.jsx)(n.strong,{children:"OK"})," and ",(0,t.jsx)(n.strong,{children:"Cancel"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The signature of the method is"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"oKCancel(\n    message: string,                // The message to display to user, can be internationalized (i18n) message.\n    messageParams?: MessageParams,  // The format parameters for the message if i18n\n    title?: string,                 // The title of the popup, could be i18n message.\n    confirmType = ConfirmType.Info, // The type of the confirmation\n    primaryButton = ModalResult.OK  // The primary button, ie. the auto-focused button, that will be clicked if user clicks Enter directly\n): Promise<ModalResult>             // A Promise to wait for user interaction\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example 2: A warning popup with OkCancel"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"this.modalService.oKCancel('Here is some important information', {}, 'Info', ConfirmType.Warning);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Which yields"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Ok Cancel popup",src:o(61335).A+"",width:"1870",height:"905"}),"\n",(0,t.jsx)(n.em,{children:"Ok Cancel popup"})]}),"\n",(0,t.jsxs)(n.p,{children:["Alternatively, the ",(0,t.jsx)(n.code,{children:"ModalService"})," provides the method ",(0,t.jsx)(n.code,{children:"yesNo()"})," to create a popup with two buttons ",(0,t.jsx)(n.strong,{children:"Yes"})," and ",(0,t.jsx)(n.strong,{children:"No"}),", which is essentially the same as ",(0,t.jsx)(n.code,{children:"okCancel()"})," but with different button naming."]}),"\n",(0,t.jsx)(n.p,{children:"The signature of the method is"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"yesNo(\n    message: string,                // The message to display to user, can be internationalized (i18n) message.\n    messageParams?: MessageParams,  // The format parameters for the message if i18n\n    title?: string,                 // The title of the popup, could be i18n message.\n    confirmType = ConfirmType.Info, // The type of the confirmation\n    primaryButton = ModalResult.OK  // The primary button, ie. the auto-focused button, that will be clicked if user clicks Enter directly\n): Promise<ModalResult>             // A Promise to wait for user interaction\n"})}),"\n",(0,t.jsx)(n.p,{children:"Example 3: A question popup with YesNo"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"this.modalService.yesNo('Do you want to perform the operation ?', {}, 'Question', ConfirmType.Info);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Which yields,"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Yes No popup",src:o(53751).A+"",width:"1870",height:"905"}),"\n",(0,t.jsx)(n.em,{children:"Yes No popup"})]}),"\n",(0,t.jsxs)(n.p,{children:["Finally, if you want to create a popup that does not fit in those proposed by ",(0,t.jsx)(n.code,{children:"ModalService"}),", you can use ",(0,t.jsx)(n.code,{children:"ModalService.confirm()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"The signature of the method is"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"confirm(\n    options: ConfirmOptions // The options to configure the popup modal\n): Promise<ModalResult>     // A Promise to wait for user interaction\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The input of this method is a ",(0,t.jsx)(n.code,{children:"ConfirmOptions"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface ConfirmOptions {\n    title?: string;                 // The title of the popup, could be i18n message.\n    message: string;                // The message to display to user, can be internationalized (i18n) message.\n    messageParams?: MessageParams;  // The format parameters for the message if i18n\n    confirmType?: ConfirmType;      // The type of the confirmation\n    buttons: ModalButton[];         // The buttons to display on the popup\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Each button of a popup is of type ",(0,t.jsx)(n.code,{children:"ModalButton"}),",\nwhich can be created by ",(0,t.jsx)(n.code,{children:"new ModalButtion(options)"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["The input of the constructor is of type ",(0,t.jsx)(n.code,{children:"IModalButton"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface IModalButton {\n    result: ModalResult;    // The result associated with the button.\n    primary?: boolean;      // Indicates whether this button is the primary button amongst a set of buttons.\n    text?: string;          // The button text.\n    visible?: boolean;      // Indicates whether the button is currently visible.\n    validation?: FormGroup; // The validation `FormGroup` that should be tested when the button is\n                            // clicked. The button will only perform its `action`\n                            // when the validation is `valid`.\n    anchor?: boolean;       // Indicats whether the button should be rendered with an `<a>` tag\n                            // rather than a `<button>` tag.\n\n    action?: (button: ModalButton) => void; // The action to perform when the button is clicked.\n                                            // Buttons with `result` values other than `Custom`\n                                            // also close the modal.\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Example 4: A customized popup with ",(0,t.jsx)(n.code,{children:"ModalService.confirm()"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"this.modalService.confirm({\n    title: 'Some random title',\n    message: 'Hello world!',\n    confirmType: ConfirmType.Info,\n    buttons: [\n        new ModalButton({\n            text: 'Yeah wow',\n            action: () => { },\n            result: ModalResult.OK\n        }),\n        new ModalButton({\n            text: 'Whatever',\n            action: () => { },\n            result: ModalResult.Ignore\n        })\n    ]\n});\n"})}),"\n",(0,t.jsx)(n.p,{children:"Which yields,"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.img,{alt:"Custom popup",src:o(74710).A+"",width:"1870",height:"905"}),"\n",(0,t.jsx)(n.em,{children:"Custom popup"})]}),"\n",(0,t.jsxs)(n.p,{children:["All these methods are backed by ",(0,t.jsx)(n.code,{children:"ModalService.open()"}),".\nAll the modals displayed by ",(0,t.jsx)(n.code,{children:"ModalService.open()"})," are dynamically created, not by including them in the HTML template of the caller component."]}),"\n",(0,t.jsx)(n.p,{children:"The signature of this method is"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"open(\n    component: Type<any>,       // The component represents the popup modal to be displayed\n    config: ModalConfig = {}    // The configuration of the popup modal\n): Promise<ModalResult>         // A Promise to wait for user interaction\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The configuration of a modal is a ",(0,t.jsx)(n.code,{children:"ModalConfig"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"interface ModalConfig {\n    panelClass?: string | string[];     // Classes that should be added to the `Overlay` pane.\n    hasBackdrop?: boolean;              // Indicates whether a backdrop should be added when opening the modal.\n    backdropClass?: string | string[];  // Classes that should be added to the backdrop.\n    model?: any;                        // The data model that the modal will operate on.\n    width?: string;                     // The CSS width of the modal.\n    height?: string;                    // The CSS height of the modal.\n    fullscreen?: boolean;               // Indicates whether the modal should occupy the screen width and height.\n                                        // In this case  `width` and `height` are set to `100%`\n                                        // and the `sq-modal-fullscreen` class is added to `panelClass`\n    closeOnBackdropClick?: boolean;     // Indicates whether a click on the backdrop should close the modal. The default value is `true`.\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["As it is shown in the signature of ",(0,t.jsx)(n.code,{children:"ModalService.open()"}),", any component can be hoisted by this method as a popup modal in the application.\nThe default popup component is injected via the Injection token ",(0,t.jsx)(n.code,{children:"MODAL_CONFIRM"}),".\nYou can change the default popup component in the Angular provider declaration of your ",(0,t.jsx)(n.code,{children:"app.module.ts"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'import { /*...,*/ MODAL_CONFIRM} from "@sinequa/core/modal";\n\n@NgModule({\n    /*....*/\n    providers: [\n        /*....*/\n        { provide: MODAL_CONFIRM, useValue: MyConfirmComponent }\n        /*....*/\n    ],\n    /*....*/\n})\n'})}),"\n",(0,t.jsxs)(n.p,{children:["Or you can call your popup component directly with ",(0,t.jsx)(n.code,{children:"ModalService.open()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"In effect, many of the popups used by Sinequa components are created using this method. Here are some examples of popup components:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Component name"}),(0,t.jsx)(n.th,{children:"UI popup"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"BsEditSavedQuery"})}),(0,t.jsx)(n.td,{children:"New saved query"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"BsManageSavedQueries"})}),(0,t.jsx)(n.td,{children:"Manage saved queries"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"BsEditAlert"})}),(0,t.jsx)(n.td,{children:"Alert"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"BsEditBasket"})}),(0,t.jsx)(n.td,{children:"Basket"})]})]})]}),"\n",(0,t.jsx)(n.p,{children:"When hoisting the modal popup with your own component, you may want to transfer data back and forth with the component."}),"\n",(0,t.jsxs)(n.p,{children:["For that you need to inject ",(0,t.jsx)(n.code,{children:"MODAL_MODEL"})," into your component, and then transfer the data object to ",(0,t.jsx)(n.code,{children:"model"})," property when calling ",(0,t.jsx)(n.code,{children:"ModalService.open()"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Example 5: transferring data to custom popup component"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'/********* mypopup.component.ts *********/\n\nimport { Component, OnInit, OnDestroy, Inject } from "@angular/core";\nimport { MODAL_MODEL } from "@sinequa/core/modal";\n/* ... */\n@Component({\n    /* ... */\n})\n\nexport class MyPopup implements OnInit, OnDestroy {\n    /* ... */\n    constructor(\n        /* ... */\n        @Inject(MODAL_MODEL) public model: SomeDataObject,\n        /* ... */\n    ) {\n        /* ... */\n    }\n    /* ... */\n}\n\n\n/********* some component calling mypopup.component.ts *********/\n\nimport { Component, OnInit, OnDestroy, Inject } from "@angular/core";\nimport { ModalService, ModalResult, ModalConfig } from "@sinequa/core/modal";\nimport { MyPopup, SomeDataObject } from "the/path/to/mypopup";\n/* ... */\n@Component({\n    /* ... */\n})\n\nexport class MyComponent implements OnInit, OnDestroy {\n    /* ... */\n\n    constructor(\n        /* ... */\n        private modalService: ModalService,\n        /* ... */\n    ) {\n        /* ... */\n    }\n\n    private callMyPopup(): Promise<void> {\n        const data: SomeDataObject = { /* ... */ };\n        const modalConfig: ModalConfig = {\n            /* ... */\n            model: data,\n            /* ... */\n        }\n        this.modalService\n            .open(MyPopup, modalConfig)\n            .then((popupResult: ModalResult) => {\n                switch (modalResult) {\n                    /* react to the modal result*/\n                }\n            });\n    }\n    /* ... */\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},74710:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/modal-custom-7f9461b5d93477a2b8b913333a35a2f6.png"},81792:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/modal-new-alert-6619f421e61dfcb3128912c3100a59d3.png"},30593:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/modal-ok-cafa491b2fd5c6dd06ff919607ced921.png"},61335:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/modal-okcancel-4ff1e5ea37496fb9885df85b2be79df7.png"},53751:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/modal-yesno-62f94c8801ec69fc20c4b911264a72b0.png"},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>a});var t=o(96540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);